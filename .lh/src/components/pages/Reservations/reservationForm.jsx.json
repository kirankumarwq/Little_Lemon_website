{
    "sourceFile": "src/components/pages/Reservations/reservationForm.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 52,
            "patches": [
                {
                    "date": 1738920323015,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1738920488085,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n import FormField from \"./formField\";\n \n const ReservationForm = ({ dispatchOnDateChange, submitData }) => {\n   const minimumDate = new Date().toISOString().split(\"T\")[0]; // Get today's date\n-  const occasions = [\"Indoor\", \"Outdoor\",];\n+  const locationDIn = [\"Indoor\", \"Outdoor\",];\n \n   const convertTo12HourFormat = (time) => {\n     let [hour, minute] = time.split(\":\").map(Number);\n     let period = hour >= 12 ? \"PM\" : \"AM\";\n@@ -174,12 +174,12 @@\n               required\n             />\n           </FormField>\n \n-          <FormField label=\"Occasion\" htmlFor=\"reservation-occasion\">\n+          <FormField label=\"Location DinIN\" htmlFor=\"reservation\">\n             <select\n-              id=\"reservation-occasion\"\n-              value={occasion}\n+              id=\"reservation\"\n+              value={locationDIn}\n               onChange={(e) => setOccasion(e.target.value)}\n               required\n             >\n               <option value=\"\">Select Occasion</option>\n"
                },
                {
                    "date": 1738920767509,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -181,9 +181,9 @@\n               value={locationDIn}\n               onChange={(e) => setOccasion(e.target.value)}\n               required\n             >\n-              <option value=\"\">Select Occasion</option>\n+              <option value=\"\">Dine-IN</option>\n               {occasions.map((occasion) => (\n                 <option key={occasion} value={occasion}>{occasion}</option>\n               ))}\n             </select>\n"
                },
                {
                    "date": 1738920886006,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n import FormField from \"./formField\";\n \n const ReservationForm = ({ dispatchOnDateChange, submitData }) => {\n   const minimumDate = new Date().toISOString().split(\"T\")[0]; // Get today's date\n-  const locationDIn = [\"Indoor\", \"Outdoor\",];\n+  const DineIN = [\"Indoor\", \"Outdoor\",];\n \n   const convertTo12HourFormat = (time) => {\n     let [hour, minute] = time.split(\":\").map(Number);\n     let period = hour >= 12 ? \"PM\" : \"AM\";\n@@ -174,17 +174,17 @@\n               required\n             />\n           </FormField>\n \n-          <FormField label=\"Location DinIN\" htmlFor=\"reservation\">\n+          <FormField label=\"Occasion\" htmlFor=\"reservation-occasion\">\n             <select\n-              id=\"reservation\"\n-              value={locationDIn}\n+              id=\"reservation-occasion\"\n+              value={occasion}\n               onChange={(e) => setOccasion(e.target.value)}\n               required\n             >\n-              <option value=\"\">Dine-IN</option>\n-              {occasions.map((occasion) => (\n+              <option value=\"\">Select Occasion</option>\n+              {Dine-IN.map((occasion) => (\n                 <option key={occasion} value={occasion}>{occasion}</option>\n               ))}\n             </select>\n           </FormField>\n"
                },
                {
                    "date": 1738920917519,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -182,9 +182,9 @@\n               onChange={(e) => setOccasion(e.target.value)}\n               required\n             >\n               <option value=\"\">Select Occasion</option>\n-              {Dine-IN.map((occasion) => (\n+              {DineIN.map((occasion) => (\n                 <option key={occasion} value={occasion}>{occasion}</option>\n               ))}\n             </select>\n           </FormField>\n"
                },
                {
                    "date": 1738920937098,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -181,9 +181,9 @@\n               value={occasion}\n               onChange={(e) => setOccasion(e.target.value)}\n               required\n             >\n-              <option value=\"\">Select Occasion</option>\n+              <option value=\"\">Dine-in</option>\n               {DineIN.map((occasion) => (\n                 <option key={occasion} value={occasion}>{occasion}</option>\n               ))}\n             </select>\n"
                },
                {
                    "date": 1738920977696,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -181,9 +181,9 @@\n               value={occasion}\n               onChange={(e) => setOccasion(e.target.value)}\n               required\n             >\n-              <option value=\"\">Dine-in</option>\n+              <option value=\"default\"hidden>Select Option </option>\n               {DineIN.map((occasion) => (\n                 <option key={occasion} value={occasion}>{occasion}</option>\n               ))}\n             </select>\n"
                },
                {
                    "date": 1738921027837,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -174,9 +174,9 @@\n               required\n             />\n           </FormField>\n \n-          <FormField label=\"Occasion\" htmlFor=\"reservation-occasion\">\n+          <FormField label=\"Dine In\" htmlFor=\"reservation-occasion\">\n             <select\n               id=\"reservation-occasion\"\n               value={occasion}\n               onChange={(e) => setOccasion(e.target.value)}\n"
                },
                {
                    "date": 1738921111517,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n import FormField from \"./formField\";\n \n const ReservationForm = ({ dispatchOnDateChange, submitData }) => {\n   const minimumDate = new Date().toISOString().split(\"T\")[0]; // Get today's date\n-  const DineIN = [\"Indoor\", \"Outdoor\",];\n+  const DineIn = [\"Indoor\", \"Outdoor\",];\n \n   const convertTo12HourFormat = (time) => {\n     let [hour, minute] = time.split(\":\").map(Number);\n     let period = hour >= 12 ? \"PM\" : \"AM\";\n@@ -20,9 +20,9 @@\n   const [date, setDate] = useState(minimumDate); // Default to today's date\n   const [mealType, setMealType] = useState(\"\"); // Default: No meal type selected\n   const [time, setTime] = useState(\"\");\n   const [numberOfGuests, setNumberGuests] = useState(\"\");\n-  const [occasion, setOccasion] = useState(\"\");\n+  const [DineIn, setDineIn] = useState(\"\");\n   const [showAllSlots, setShowAllSlots] = useState(false);\n   const [currentTime, setCurrentTime] = useState(null);\n \n   useEffect(() => {\n@@ -88,19 +88,19 @@\n   const handleFormSubmit = (e) => {\n     e.preventDefault();\n \n     // Check if all required fields are filled\n-    if (!date || !mealType || !time || !numberOfGuests || !occasion) {\n+    if (!date || !mealType || !time || !numberOfGuests || !DineIN) {\n       alert(\"Please fill out all required fields.\");\n       return;\n     }\n \n-    submitData({ date, mealType, time, numberOfGuests, occasion });\n+    submitData({ date, mealType, time, numberOfGuests, DineIN });\n   };\n \n   // Check if the form is valid\n   const isFormValid = () => {\n-    return date && mealType && time && numberOfGuests && occasion;\n+    return date && mealType && time && numberOfGuests && DineIN;\n   };\n \n   return (\n     <form onSubmit={handleFormSubmit}>\n@@ -174,18 +174,18 @@\n               required\n             />\n           </FormField>\n \n-          <FormField label=\"Dine In\" htmlFor=\"reservation-occasion\">\n+          <FormField label=\"Dine In\" htmlFor=\"reservation-DineIn\">\n             <select\n-              id=\"reservation-occasion\"\n-              value={occasion}\n-              onChange={(e) => setOccasion(e.target.value)}\n+              id=\"reservation-DineIN\"\n+              value={DineIn}\n+              onChange={(e) => setDineIN(e.target.value)}\n               required\n             >\n               <option value=\"default\"hidden>Select Option </option>\n-              {DineIN.map((occasion) => (\n-                <option key={occasion} value={occasion}>{occasion}</option>\n+              {DineIn.map((DineIN) => (\n+                <option key={DineIN} value={DineIN}>{DineIN}</option>\n               ))}\n             </select>\n           </FormField>\n         </>\n"
                },
                {
                    "date": 1738921174096,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -182,10 +182,10 @@\n               onChange={(e) => setDineIN(e.target.value)}\n               required\n             >\n               <option value=\"default\"hidden>Select Option </option>\n-              {DineIn.map((DineIN) => (\n-                <option key={DineIN} value={DineIN}>{DineIN}</option>\n+              {DineIn.map((DineIn) => (\n+                <option key={DineIn} value={DineIn}>{DineIn}</option>\n               ))}\n             </select>\n           </FormField>\n         </>\n"
                },
                {
                    "date": 1738921228053,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n import FormField from \"./formField\";\n \n const ReservationForm = ({ dispatchOnDateChange, submitData }) => {\n   const minimumDate = new Date().toISOString().split(\"T\")[0]; // Get today's date\n-  const DineIn = [\"Indoor\", \"Outdoor\",];\n+  const DineIN = [\"Indoor\", \"Outdoor\",];\n \n   const convertTo12HourFormat = (time) => {\n     let [hour, minute] = time.split(\":\").map(Number);\n     let period = hour >= 12 ? \"PM\" : \"AM\";\n"
                },
                {
                    "date": 1738921268201,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -177,14 +177,14 @@\n \n           <FormField label=\"Dine In\" htmlFor=\"reservation-DineIn\">\n             <select\n               id=\"reservation-DineIN\"\n-              value={DineIn}\n+              value={DineIN}\n               onChange={(e) => setDineIN(e.target.value)}\n               required\n             >\n               <option value=\"default\"hidden>Select Option </option>\n-              {DineIn.map((DineIn) => (\n+              {DineIN.map((DineIn) => (\n                 <option key={DineIn} value={DineIn}>{DineIn}</option>\n               ))}\n             </select>\n           </FormField>\n"
                },
                {
                    "date": 1738921294824,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -182,10 +182,10 @@\n               onChange={(e) => setDineIN(e.target.value)}\n               required\n             >\n               <option value=\"default\"hidden>Select Option </option>\n-              {DineIN.map((DineIn) => (\n-                <option key={DineIn} value={DineIn}>{DineIn}</option>\n+              {DineIN.map((DineIN) => (\n+                <option key={DineIN} value={DineIN}>{DineIN}</option>\n               ))}\n             </select>\n           </FormField>\n         </>\n"
                },
                {
                    "date": 1738921387501,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n   const [date, setDate] = useState(minimumDate); // Default to today's date\n   const [mealType, setMealType] = useState(\"\"); // Default: No meal type selected\n   const [time, setTime] = useState(\"\");\n   const [numberOfGuests, setNumberGuests] = useState(\"\");\n-  const [DineIn, setDineIn] = useState(\"\");\n+  const [dineIN, setDineIN] = useState(\"\");\n   const [showAllSlots, setShowAllSlots] = useState(false);\n   const [currentTime, setCurrentTime] = useState(null);\n \n   useEffect(() => {\n"
                },
                {
                    "date": 1738921411341,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -183,9 +183,9 @@\n               required\n             >\n               <option value=\"default\"hidden>Select Option </option>\n               {DineIN.map((DineIN) => (\n-                <option key={DineIN} value={DineIN}>{DineIN}</option>\n+                <option key={dineIN} value={dineIN}>{dineIN}</option>\n               ))}\n             </select>\n           </FormField>\n         </>\n"
                },
                {
                    "date": 1738921422281,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -182,9 +182,9 @@\n               onChange={(e) => setDineIN(e.target.value)}\n               required\n             >\n               <option value=\"default\"hidden>Select Option </option>\n-              {DineIN.map((DineIN) => (\n+              {DineIN.map((dineIN) => (\n                 <option key={dineIN} value={dineIN}>{dineIN}</option>\n               ))}\n             </select>\n           </FormField>\n"
                },
                {
                    "date": 1738921489571,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,76 +2,22 @@\n import FormField from \"./formField\";\n \n const ReservationForm = ({ dispatchOnDateChange, submitData }) => {\n   const minimumDate = new Date().toISOString().split(\"T\")[0]; // Get today's date\n-  const DineIN = [\"Indoor\", \"Outdoor\",];\n+  const dineOptions = [\"Indoor\", \"Outdoor\"]; // ✅ Renamed to avoid conflict\n \n-  const convertTo12HourFormat = (time) => {\n-    let [hour, minute] = time.split(\":\").map(Number);\n-    let period = hour >= 12 ? \"PM\" : \"AM\";\n-    hour = hour > 12 ? hour - 12 : hour === 0 ? 12 : hour;\n-    return `${hour}:${minute === 0 ? \"00\" : minute} ${period}`;\n-  };\n-\n-  const allTimes = [\n-    \"12:00\", \"12:30\", \"13:00\", \"13:30\", \"14:00\", \"14:30\", \"15:00\", \"15:30\", \"16:00\", \"16:30\", \"17:00\", // Lunch\n-    \"18:00\", \"18:30\", \"19:00\", \"19:30\", \"20:00\", \"20:30\", \"21:00\", \"21:30\", \"22:00\", \"22:30\", \"23:00\"  // Dinner\n-  ];\n-\n-  const [date, setDate] = useState(minimumDate); // Default to today's date\n-  const [mealType, setMealType] = useState(\"\"); // Default: No meal type selected\n+  const [date, setDate] = useState(minimumDate);\n+  const [mealType, setMealType] = useState(\"\");\n   const [time, setTime] = useState(\"\");\n   const [numberOfGuests, setNumberGuests] = useState(\"\");\n-  const [dineIN, setDineIN] = useState(\"\");\n+  const [dineIN, setDineIN] = useState(\"\"); // ✅ Corrected State Name\n   const [showAllSlots, setShowAllSlots] = useState(false);\n   const [currentTime, setCurrentTime] = useState(null);\n \n   useEffect(() => {\n-    const currentTime = new Date();\n-    setCurrentTime(currentTime);\n+    setCurrentTime(new Date());\n   }, []);\n \n-  const isToday = new Date(date).toDateString() === new Date().toDateString();\n-  const currentHour = currentTime ? currentTime.getHours() : 0;\n-  const currentMinute = currentTime ? currentTime.getMinutes() : 0;\n-\n-  // Function to check if the time slot is available based on the current time\n-  const isTimeAvailable = (time) => {\n-    const [slotHour, slotMinute] = time.split(\":\").map(Number);\n-    return (slotHour > currentHour) || (slotHour === currentHour && slotMinute > currentMinute);\n-  };\n-\n-  // Filtered times logic based on the new condition\n-  const filteredTimes = allTimes\n-    .filter((time) => {\n-      const hour = parseInt(time.split(\":\")[0]);\n-      const [slotHour, slotMinute] = time.split(\":\").map(Number);\n-\n-      // If the booking date is not today, show both lunch and dinner time slots without checking time\n-      if (new Date(date) > new Date()) {\n-        return (\n-          (mealType === \"Lunch\" && hour >= 12 && hour <= 17) ||\n-          (mealType === \"Dinner\" && hour >= 18 && hour <= 23)\n-        );\n-      }\n-\n-      // If the booking date is today, show only the applicable meal type based on current time\n-      if (isToday) {\n-        if (mealType === \"Lunch\" && hour >= 12 && hour <= 17) {\n-          return (slotHour > currentHour) || (slotHour === currentHour && slotMinute > currentMinute);\n-        }\n-        if (mealType === \"Dinner\" && hour >= 18 && hour <= 23) {\n-          return (slotHour > currentHour) || (slotHour === currentHour && slotMinute > currentMinute);\n-        }\n-      }\n-\n-      return false;\n-    })\n-    .map((time) => ({\n-      value: time,\n-      label: convertTo12HourFormat(time),\n-    }));\n-\n   const handleDateChange = (e) => {\n     setDate(e.target.value);\n     dispatchOnDateChange(e.target.value);\n   };\n@@ -81,26 +27,25 @@\n     setTime(\"\"); // Reset time when meal type changes\n   };\n \n   const handleTimeChange = (value) => {\n-    setTime(value); // Update time slot without triggering validation\n+    setTime(value);\n   };\n \n   const handleFormSubmit = (e) => {\n     e.preventDefault();\n \n     // Check if all required fields are filled\n-    if (!date || !mealType || !time || !numberOfGuests || !DineIN) {\n+    if (!date || !mealType || !time || !numberOfGuests || !dineIN) {\n       alert(\"Please fill out all required fields.\");\n       return;\n     }\n \n-    submitData({ date, mealType, time, numberOfGuests, DineIN });\n+    submitData({ date, mealType, time, numberOfGuests, dineIN }); // ✅ Now correctly submitting dineIN\n   };\n \n-  // Check if the form is valid\n   const isFormValid = () => {\n-    return date && mealType && time && numberOfGuests && DineIN;\n+    return date && mealType && time && numberOfGuests && dineIN;\n   };\n \n   return (\n     <form onSubmit={handleFormSubmit}>\n@@ -108,90 +53,31 @@\n         <input\n           type=\"date\"\n           id=\"reservation-date\"\n           value={date}\n-          min={minimumDate} // Prevent selecting past dates\n+          min={minimumDate}\n           onChange={handleDateChange}\n           required\n         />\n       </FormField>\n \n       <FormField label=\"Meal Type\" htmlFor=\"meal-type\">\n-        <select\n-          id=\"meal-type\"\n-          value={mealType}\n-          onChange={handleMealTypeChange}\n-          required\n-        >\n+        <select id=\"meal-type\" value={mealType} onChange={handleMealTypeChange} required>\n           <option value=\"\" hidden>Select Meal Type</option>\n-          {isToday && currentHour < 17 && <option value=\"Lunch\">Lunch (12 PM - 5 PM)</option>}\n-          {isToday && currentHour >= 17 && <option value=\"Dinner\">Dinner (6 PM - 11 PM)</option>}\n-          {new Date(date) > new Date() && (\n-            <>\n-              <option value=\"Lunch\">Lunch (12 PM - 5 PM)</option>\n-              <option value=\"Dinner\">Dinner (6 PM - 11 PM)</option>\n-            </>\n-          )}\n+          <option value=\"Lunch\">Lunch (12 PM - 5 PM)</option>\n+          <option value=\"Dinner\">Dinner (6 PM - 11 PM)</option>\n         </select>\n       </FormField>\n \n-      <FormField label=\"Time\" htmlFor=\"reservation-time\">\n-        <div className=\"time-slots\">\n-          {filteredTimes.slice(0, showAllSlots ? filteredTimes.length : 4).map(({ value, label }) => (\n-            <button\n-              key={value}\n-              className={`${time === value ? \"selected\" : \"\"} ${!isTimeAvailable(value) && new Date(date) <= new Date() ? \"unavailable\" : \"\"}`}\n-              onClick={() => handleTimeChange(value)} // Call time change function without validation\n-              disabled={new Date(date) <= new Date() && !isTimeAvailable(value)} // Only disable if time is in the past and date is today\n-            >\n-              {label}\n-            </button>\n+      <FormField label=\"Dine In\" htmlFor=\"reservation-DineIn\">\n+        <select id=\"reservation-DineIN\" value={dineIN} onChange={(e) => setDineIN(e.target.value)} required>\n+          <option value=\"\" hidden>Select Option</option>\n+          {dineOptions.map((option) => (\n+            <option key={option} value={option}>{option}</option> // ✅ Now mapping correctly\n           ))}\n-        </div>\n-\n-        {/* Show More button */}\n-        {filteredTimes.length > 4 && (\n-          <button\n-            type=\"button\"\n-            onClick={() => setShowAllSlots(!showAllSlots)}\n-            className=\"show-more-btn\"\n-          >\n-            {showAllSlots ? \"Show Less\" : \"Show More\"}\n-          </button>\n-        )}\n+        </select>\n       </FormField>\n \n-      {/* Render fields only when time is selected */}\n-      {time && (\n-        <>\n-          <FormField label=\"Number of guests (max upto 10)\" htmlFor=\"reservation-number-guests\">\n-            <input\n-              type=\"number\"\n-              id=\"reservation-number-guests\"\n-              value={numberOfGuests}\n-              min=\"1\"\n-              max=\"10\"\n-              onChange={(e) => setNumberGuests(e.target.value)}\n-              required\n-            />\n-          </FormField>\n-\n-          <FormField label=\"Dine In\" htmlFor=\"reservation-DineIn\">\n-            <select\n-              id=\"reservation-DineIN\"\n-              value={DineIN}\n-              onChange={(e) => setDineIN(e.target.value)}\n-              required\n-            >\n-              <option value=\"default\"hidden>Select Option </option>\n-              {DineIN.map((dineIN) => (\n-                <option key={dineIN} value={dineIN}>{dineIN}</option>\n-              ))}\n-            </select>\n-          </FormField>\n-        </>\n-      )}\n-\n       <button className=\"button-primary\" type=\"submit\" disabled={!isFormValid()}>\n         Reserve now!\n       </button>\n     </form>\n"
                },
                {
                    "date": 1738921519424,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,22 +2,76 @@\n import FormField from \"./formField\";\n \n const ReservationForm = ({ dispatchOnDateChange, submitData }) => {\n   const minimumDate = new Date().toISOString().split(\"T\")[0]; // Get today's date\n-  const dineOptions = [\"Indoor\", \"Outdoor\"]; // ✅ Renamed to avoid conflict\n+  const DineIN = [\"Indoor\", \"Outdoor\",];\n \n-  const [date, setDate] = useState(minimumDate);\n-  const [mealType, setMealType] = useState(\"\");\n+  const convertTo12HourFormat = (time) => {\n+    let [hour, minute] = time.split(\":\").map(Number);\n+    let period = hour >= 12 ? \"PM\" : \"AM\";\n+    hour = hour > 12 ? hour - 12 : hour === 0 ? 12 : hour;\n+    return `${hour}:${minute === 0 ? \"00\" : minute} ${period}`;\n+  };\n+\n+  const allTimes = [\n+    \"12:00\", \"12:30\", \"13:00\", \"13:30\", \"14:00\", \"14:30\", \"15:00\", \"15:30\", \"16:00\", \"16:30\", \"17:00\", // Lunch\n+    \"18:00\", \"18:30\", \"19:00\", \"19:30\", \"20:00\", \"20:30\", \"21:00\", \"21:30\", \"22:00\", \"22:30\", \"23:00\"  // Dinner\n+  ];\n+\n+  const [date, setDate] = useState(minimumDate); // Default to today's date\n+  const [mealType, setMealType] = useState(\"\"); // Default: No meal type selected\n   const [time, setTime] = useState(\"\");\n   const [numberOfGuests, setNumberGuests] = useState(\"\");\n-  const [dineIN, setDineIN] = useState(\"\"); // ✅ Corrected State Name\n+  const [dineIN, setDineIN] = useState(\"\");\n   const [showAllSlots, setShowAllSlots] = useState(false);\n   const [currentTime, setCurrentTime] = useState(null);\n \n   useEffect(() => {\n-    setCurrentTime(new Date());\n+    const currentTime = new Date();\n+    setCurrentTime(currentTime);\n   }, []);\n \n+  const isToday = new Date(date).toDateString() === new Date().toDateString();\n+  const currentHour = currentTime ? currentTime.getHours() : 0;\n+  const currentMinute = currentTime ? currentTime.getMinutes() : 0;\n+\n+  // Function to check if the time slot is available based on the current time\n+  const isTimeAvailable = (time) => {\n+    const [slotHour, slotMinute] = time.split(\":\").map(Number);\n+    return (slotHour > currentHour) || (slotHour === currentHour && slotMinute > currentMinute);\n+  };\n+\n+  // Filtered times logic based on the new condition\n+  const filteredTimes = allTimes\n+    .filter((time) => {\n+      const hour = parseInt(time.split(\":\")[0]);\n+      const [slotHour, slotMinute] = time.split(\":\").map(Number);\n+\n+      // If the booking date is not today, show both lunch and dinner time slots without checking time\n+      if (new Date(date) > new Date()) {\n+        return (\n+          (mealType === \"Lunch\" && hour >= 12 && hour <= 17) ||\n+          (mealType === \"Dinner\" && hour >= 18 && hour <= 23)\n+        );\n+      }\n+\n+      // If the booking date is today, show only the applicable meal type based on current time\n+      if (isToday) {\n+        if (mealType === \"Lunch\" && hour >= 12 && hour <= 17) {\n+          return (slotHour > currentHour) || (slotHour === currentHour && slotMinute > currentMinute);\n+        }\n+        if (mealType === \"Dinner\" && hour >= 18 && hour <= 23) {\n+          return (slotHour > currentHour) || (slotHour === currentHour && slotMinute > currentMinute);\n+        }\n+      }\n+\n+      return false;\n+    })\n+    .map((time) => ({\n+      value: time,\n+      label: convertTo12HourFormat(time),\n+    }));\n+\n   const handleDateChange = (e) => {\n     setDate(e.target.value);\n     dispatchOnDateChange(e.target.value);\n   };\n@@ -27,25 +81,26 @@\n     setTime(\"\"); // Reset time when meal type changes\n   };\n \n   const handleTimeChange = (value) => {\n-    setTime(value);\n+    setTime(value); // Update time slot without triggering validation\n   };\n \n   const handleFormSubmit = (e) => {\n     e.preventDefault();\n \n     // Check if all required fields are filled\n-    if (!date || !mealType || !time || !numberOfGuests || !dineIN) {\n+    if (!date || !mealType || !time || !numberOfGuests || !DineIN) {\n       alert(\"Please fill out all required fields.\");\n       return;\n     }\n \n-    submitData({ date, mealType, time, numberOfGuests, dineIN }); // ✅ Now correctly submitting dineIN\n+    submitData({ date, mealType, time, numberOfGuests, DineIN });\n   };\n \n+  // Check if the form is valid\n   const isFormValid = () => {\n-    return date && mealType && time && numberOfGuests && dineIN;\n+    return date && mealType && time && numberOfGuests && DineIN;\n   };\n \n   return (\n     <form onSubmit={handleFormSubmit}>\n@@ -53,31 +108,90 @@\n         <input\n           type=\"date\"\n           id=\"reservation-date\"\n           value={date}\n-          min={minimumDate}\n+          min={minimumDate} // Prevent selecting past dates\n           onChange={handleDateChange}\n           required\n         />\n       </FormField>\n \n       <FormField label=\"Meal Type\" htmlFor=\"meal-type\">\n-        <select id=\"meal-type\" value={mealType} onChange={handleMealTypeChange} required>\n+        <select\n+          id=\"meal-type\"\n+          value={mealType}\n+          onChange={handleMealTypeChange}\n+          required\n+        >\n           <option value=\"\" hidden>Select Meal Type</option>\n-          <option value=\"Lunch\">Lunch (12 PM - 5 PM)</option>\n-          <option value=\"Dinner\">Dinner (6 PM - 11 PM)</option>\n+          {isToday && currentHour < 17 && <option value=\"Lunch\">Lunch (12 PM - 5 PM)</option>}\n+          {isToday && currentHour >= 17 && <option value=\"Dinner\">Dinner (6 PM - 11 PM)</option>}\n+          {new Date(date) > new Date() && (\n+            <>\n+              <option value=\"Lunch\">Lunch (12 PM - 5 PM)</option>\n+              <option value=\"Dinner\">Dinner (6 PM - 11 PM)</option>\n+            </>\n+          )}\n         </select>\n       </FormField>\n \n-      <FormField label=\"Dine In\" htmlFor=\"reservation-DineIn\">\n-        <select id=\"reservation-DineIN\" value={dineIN} onChange={(e) => setDineIN(e.target.value)} required>\n-          <option value=\"\" hidden>Select Option</option>\n-          {dineOptions.map((option) => (\n-            <option key={option} value={option}>{option}</option> // ✅ Now mapping correctly\n+      <FormField label=\"Time\" htmlFor=\"reservation-time\">\n+        <div className=\"time-slots\">\n+          {filteredTimes.slice(0, showAllSlots ? filteredTimes.length : 4).map(({ value, label }) => (\n+            <button\n+              key={value}\n+              className={`${time === value ? \"selected\" : \"\"} ${!isTimeAvailable(value) && new Date(date) <= new Date() ? \"unavailable\" : \"\"}`}\n+              onClick={() => handleTimeChange(value)} // Call time change function without validation\n+              disabled={new Date(date) <= new Date() && !isTimeAvailable(value)} // Only disable if time is in the past and date is today\n+            >\n+              {label}\n+            </button>\n           ))}\n-        </select>\n+        </div>\n+\n+        {/* Show More button */}\n+        {filteredTimes.length > 4 && (\n+          <button\n+            type=\"button\"\n+            onClick={() => setShowAllSlots(!showAllSlots)}\n+            className=\"show-more-btn\"\n+          >\n+            {showAllSlots ? \"Show Less\" : \"Show More\"}\n+          </button>\n+        )}\n       </FormField>\n \n+      {/* Render fields only when time is selected */}\n+      {time && (\n+        <>\n+          <FormField label=\"Number of guests (max upto 10)\" htmlFor=\"reservation-number-guests\">\n+            <input\n+              type=\"number\"\n+              id=\"reservation-number-guests\"\n+              value={numberOfGuests}\n+              min=\"1\"\n+              max=\"10\"\n+              onChange={(e) => setNumberGuests(e.target.value)}\n+              required\n+            />\n+          </FormField>\n+\n+          <FormField label=\"Dine In\" htmlFor=\"reservation-DineIn\">\n+            <select\n+              id=\"reservation-DineIN\"\n+              value={DineIN}\n+              onChange={(e) => setDineIN(e.target.value)}\n+              required\n+            >\n+              <option value=\"default\"hidden>Select Option </option>\n+              {DineIN.map((dineIN) => (\n+                <option key={dineIN} value={dineIN}>{dineIN}</option>\n+              ))}\n+            </select>\n+          </FormField>\n+        </>\n+      )}\n+\n       <button className=\"button-primary\" type=\"submit\" disabled={!isFormValid()}>\n         Reserve now!\n       </button>\n     </form>\n"
                },
                {
                    "date": 1738921579009,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n import FormField from \"./formField\";\n \n const ReservationForm = ({ dispatchOnDateChange, submitData }) => {\n   const minimumDate = new Date().toISOString().split(\"T\")[0]; // Get today's date\n-  const DineIN = [\"Indoor\", \"Outdoor\",];\n+  const dineOptions = [\"Indoor\", \"Outdoor\",];\n \n   const convertTo12HourFormat = (time) => {\n     let [hour, minute] = time.split(\":\").map(Number);\n     let period = hour >= 12 ? \"PM\" : \"AM\";\n"
                },
                {
                    "date": 1738921724102,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -88,14 +88,14 @@\n   const handleFormSubmit = (e) => {\n     e.preventDefault();\n \n     // Check if all required fields are filled\n-    if (!date || !mealType || !time || !numberOfGuests || !DineIN) {\n+    if (!date || !mealType || !time || !numberOfGuests || !dineIN) {\n       alert(\"Please fill out all required fields.\");\n       return;\n     }\n \n-    submitData({ date, mealType, time, numberOfGuests, DineIN });\n+    submitData({ date, mealType, time, numberOfGuests, dineIN });\n   };\n \n   // Check if the form is valid\n   const isFormValid = () => {\n@@ -177,14 +177,14 @@\n \n           <FormField label=\"Dine In\" htmlFor=\"reservation-DineIn\">\n             <select\n               id=\"reservation-DineIN\"\n-              value={DineIN}\n+              value={dineIN}\n               onChange={(e) => setDineIN(e.target.value)}\n               required\n             >\n               <option value=\"default\"hidden>Select Option </option>\n-              {DineIN.map((dineIN) => (\n+              {dineIN.map((dineIN) => (\n                 <option key={dineIN} value={dineIN}>{dineIN}</option>\n               ))}\n             </select>\n           </FormField>\n"
                },
                {
                    "date": 1738921747597,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -182,9 +182,9 @@\n               onChange={(e) => setDineIN(e.target.value)}\n               required\n             >\n               <option value=\"default\"hidden>Select Option </option>\n-              {dineIN.map((dineIN) => (\n+              {dineInOptions.map((dineIN) => (\n                 <option key={dineIN} value={dineIN}>{dineIN}</option>\n               ))}\n             </select>\n           </FormField>\n"
                },
                {
                    "date": 1738921848841,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -182,9 +182,9 @@\n               onChange={(e) => setDineIN(e.target.value)}\n               required\n             >\n               <option value=\"default\"hidden>Select Option </option>\n-              {dineInOptions.map((dineIN) => (\n+              {dineOptions.map((dineIN) => (\n                 <option key={dineIN} value={dineIN}>{dineIN}</option>\n               ))}\n             </select>\n           </FormField>\n"
                },
                {
                    "date": 1738921898089,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -182,9 +182,9 @@\n               onChange={(e) => setDineIN(e.target.value)}\n               required\n             >\n               <option value=\"default\"hidden>Select Option </option>\n-              {dineOptions.map((dineIN) => (\n+              {dineOptions.map((option) => (\n                 <option key={dineIN} value={dineIN}>{dineIN}</option>\n               ))}\n             </select>\n           </FormField>\n"
                },
                {
                    "date": 1738921924407,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -183,9 +183,9 @@\n               required\n             >\n               <option value=\"default\"hidden>Select Option </option>\n               {dineOptions.map((option) => (\n-                <option key={dineIN} value={dineIN}>{dineIN}</option>\n+                <option key={option} value={option}>{option}</option>\n               ))}\n             </select>\n           </FormField>\n         </>\n"
                },
                {
                    "date": 1738921960070,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -98,9 +98,9 @@\n   };\n \n   // Check if the form is valid\n   const isFormValid = () => {\n-    return date && mealType && time && numberOfGuests && DineIN;\n+    return date && mealType && time && numberOfGuests && dineIN;\n   };\n \n   return (\n     <form onSubmit={handleFormSubmit}>\n"
                },
                {
                    "date": 1738922406836,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -174,21 +174,23 @@\n               required\n             />\n           </FormField>\n \n-          <FormField label=\"Dine In\" htmlFor=\"reservation-DineIn\">\n-            <select\n-              id=\"reservation-DineIN\"\n-              value={dineIN}\n-              onChange={(e) => setDineIN(e.target.value)}\n-              required\n-            >\n-              <option value=\"default\"hidden>Select Option </option>\n-              {dineOptions.map((option) => (\n-                <option key={option} value={option}>{option}</option>\n-              ))}\n-            </select>\n-          </FormField>\n+          <FormField label=\"Dine In\">\n+  <div className=\"dine-in-options\">\n+    {dineOptions.map((option) => (\n+      <button\n+        key={option}\n+        type=\"button\"\n+        className={`dine-in-btn ${dineIN === option ? \"selected\" : \"\"}`}\n+        onClick={() => setDineIN(option)}\n+      >\n+        {option}\n+      </button>\n+    ))}\n+  </div>\n+</FormField>\n+\n         </>\n       )}\n \n       <button className=\"button-primary\" type=\"submit\" disabled={!isFormValid()}>\n"
                },
                {
                    "date": 1738922890672,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -122,9 +122,9 @@\n           onChange={handleMealTypeChange}\n           required\n         >\n           <option value=\"\" hidden>Select Meal Type</option>\n-          {isToday && currentHour < 17 && <option value=\"Lunch\">Lunch (12 PM - 5 PM)</option>}\n+          {isToday && currentHour < 17 && <option value=\"Lunch\">Lunch (12 PM - 5 PM)</option>||<option value=\"Dinner\">Dinner (6 PM - 11 PM)</option>}\n           {isToday && currentHour >= 17 && <option value=\"Dinner\">Dinner (6 PM - 11 PM)</option>}\n           {new Date(date) > new Date() && (\n             <>\n               <option value=\"Lunch\">Lunch (12 PM - 5 PM)</option>\n"
                },
                {
                    "date": 1738922916437,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -122,9 +122,9 @@\n           onChange={handleMealTypeChange}\n           required\n         >\n           <option value=\"\" hidden>Select Meal Type</option>\n-          {isToday && currentHour < 17 && <option value=\"Lunch\">Lunch (12 PM - 5 PM)</option>||<option value=\"Dinner\">Dinner (6 PM - 11 PM)</option>}\n+          {isToday && currentHour < 17 && <option value=\"Lunch\">Lunch (12 PM - 5 PM)</option>&&<option value=\"Dinner\">Dinner (6 PM - 11 PM)</option>}\n           {isToday && currentHour >= 17 && <option value=\"Dinner\">Dinner (6 PM - 11 PM)</option>}\n           {new Date(date) > new Date() && (\n             <>\n               <option value=\"Lunch\">Lunch (12 PM - 5 PM)</option>\n"
                },
                {
                    "date": 1738923019982,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -122,9 +122,10 @@\n           onChange={handleMealTypeChange}\n           required\n         >\n           <option value=\"\" hidden>Select Meal Type</option>\n-          {isToday && currentHour < 17 && <option value=\"Lunch\">Lunch (12 PM - 5 PM)</option>&&<option value=\"Dinner\">Dinner (6 PM - 11 PM)</option>}\n+          {isToday&& currentHour<17&& <option value=\"Breakfast\">Breakfast (6 AM - 11 AM)</option>}\n+          {isToday && currentHour < 17 && <option value=\"Lunch\">Lunch (12 PM - 5 PM)</option>}\n           {isToday && currentHour >= 17 && <option value=\"Dinner\">Dinner (6 PM - 11 PM)</option>}\n           {new Date(date) > new Date() && (\n             <>\n               <option value=\"Lunch\">Lunch (12 PM - 5 PM)</option>\n"
                },
                {
                    "date": 1738923135971,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,8 +12,9 @@\n     return `${hour}:${minute === 0 ? \"00\" : minute} ${period}`;\n   };\n \n   const allTimes = [\n+    \"06:00\", \"06:30\", \"07:00\", \"07:30\", \"08:00\", \"08:30\", \"09:00\", \"09:30\", \"10:00\", \"10:30\", \"11:00\", \"11:30\",//breakfast\n     \"12:00\", \"12:30\", \"13:00\", \"13:30\", \"14:00\", \"14:30\", \"15:00\", \"15:30\", \"16:00\", \"16:30\", \"17:00\", // Lunch\n     \"18:00\", \"18:30\", \"19:00\", \"19:30\", \"20:00\", \"20:30\", \"21:00\", \"21:30\", \"22:00\", \"22:30\", \"23:00\"  // Dinner\n   ];\n \n"
                },
                {
                    "date": 1738923322265,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,15 +49,19 @@\n \n       // If the booking date is not today, show both lunch and dinner time slots without checking time\n       if (new Date(date) > new Date()) {\n         return (\n+          (mealType === \"Breakfast\" && hour >= 6 && hour <= 11) ||\n           (mealType === \"Lunch\" && hour >= 12 && hour <= 17) ||\n           (mealType === \"Dinner\" && hour >= 18 && hour <= 23)\n         );\n       }\n \n       // If the booking date is today, show only the applicable meal type based on current time\n       if (isToday) {\n+        if (mealType === \"Breakfast\" && hour >= 6 && hour <= 11) {\n+          return (slotHour > currentHour) || (slotHour === currentHour && slotMinute > currentMinute);\n+        }\n         if (mealType === \"Lunch\" && hour >= 12 && hour <= 17) {\n           return (slotHour > currentHour) || (slotHour === currentHour && slotMinute > currentMinute);\n         }\n         if (mealType === \"Dinner\" && hour >= 18 && hour <= 23) {\n@@ -128,8 +132,9 @@\n           {isToday && currentHour < 17 && <option value=\"Lunch\">Lunch (12 PM - 5 PM)</option>}\n           {isToday && currentHour >= 17 && <option value=\"Dinner\">Dinner (6 PM - 11 PM)</option>}\n           {new Date(date) > new Date() && (\n             <>\n+              <option value=\"Breakfast\">Breakfast (6 AM - 11 AM)</option>\n               <option value=\"Lunch\">Lunch (12 PM - 5 PM)</option>\n               <option value=\"Dinner\">Dinner (6 PM - 11 PM)</option>\n             </>\n           )}\n"
                },
                {
                    "date": 1738923422185,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -127,9 +127,9 @@\n           onChange={handleMealTypeChange}\n           required\n         >\n           <option value=\"\" hidden>Select Meal Type</option>\n-          {isToday&& currentHour<17&& <option value=\"Breakfast\">Breakfast (6 AM - 11 AM)</option>}\n+          {isToday&& currentHour <=17&& <option value=\"Breakfast\">Breakfast (6 AM - 11 AM)</option>}\n           {isToday && currentHour < 17 && <option value=\"Lunch\">Lunch (12 PM - 5 PM)</option>}\n           {isToday && currentHour >= 17 && <option value=\"Dinner\">Dinner (6 PM - 11 PM)</option>}\n           {new Date(date) > new Date() && (\n             <>\n"
                },
                {
                    "date": 1738923495229,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -127,9 +127,9 @@\n           onChange={handleMealTypeChange}\n           required\n         >\n           <option value=\"\" hidden>Select Meal Type</option>\n-          {isToday&& currentHour <=17&& <option value=\"Breakfast\">Breakfast (6 AM - 11 AM)</option>}\n+          {isToday&& currentHour <=6 && <option value=\"Breakfast\">Breakfast (6 AM - 11 AM)</option>}\n           {isToday && currentHour < 17 && <option value=\"Lunch\">Lunch (12 PM - 5 PM)</option>}\n           {isToday && currentHour >= 17 && <option value=\"Dinner\">Dinner (6 PM - 11 PM)</option>}\n           {new Date(date) > new Date() && (\n             <>\n"
                },
                {
                    "date": 1738923500769,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -127,9 +127,9 @@\n           onChange={handleMealTypeChange}\n           required\n         >\n           <option value=\"\" hidden>Select Meal Type</option>\n-          {isToday&& currentHour <=6 && <option value=\"Breakfast\">Breakfast (6 AM - 11 AM)</option>}\n+          {isToday&& currentHour <= 6 && <option value=\"Breakfast\">Breakfast (6 AM - 11 AM)</option>}\n           {isToday && currentHour < 17 && <option value=\"Lunch\">Lunch (12 PM - 5 PM)</option>}\n           {isToday && currentHour >= 17 && <option value=\"Dinner\">Dinner (6 PM - 11 PM)</option>}\n           {new Date(date) > new Date() && (\n             <>\n"
                },
                {
                    "date": 1738923575542,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -128,9 +128,9 @@\n           required\n         >\n           <option value=\"\" hidden>Select Meal Type</option>\n           {isToday&& currentHour <= 6 && <option value=\"Breakfast\">Breakfast (6 AM - 11 AM)</option>}\n-          {isToday && currentHour < 17 && <option value=\"Lunch\">Lunch (12 PM - 5 PM)</option>}\n+          {isToday && currentHour < 12 && <option value=\"Lunch\">Lunch (12 PM - 5 PM)</option>}\n           {isToday && currentHour >= 17 && <option value=\"Dinner\">Dinner (6 PM - 11 PM)</option>}\n           {new Date(date) > new Date() && (\n             <>\n               <option value=\"Breakfast\">Breakfast (6 AM - 11 AM)</option>\n"
                },
                {
                    "date": 1738923599827,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -128,9 +128,9 @@\n           required\n         >\n           <option value=\"\" hidden>Select Meal Type</option>\n           {isToday&& currentHour <= 6 && <option value=\"Breakfast\">Breakfast (6 AM - 11 AM)</option>}\n-          {isToday && currentHour < 12 && <option value=\"Lunch\">Lunch (12 PM - 5 PM)</option>}\n+          {isToday && currentHour <=12 && <option value=\"Lunch\">Lunch (12 PM - 5 PM)</option>}\n           {isToday && currentHour >= 17 && <option value=\"Dinner\">Dinner (6 PM - 11 PM)</option>}\n           {new Date(date) > new Date() && (\n             <>\n               <option value=\"Breakfast\">Breakfast (6 AM - 11 AM)</option>\n"
                },
                {
                    "date": 1738923615375,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -128,9 +128,9 @@\n           required\n         >\n           <option value=\"\" hidden>Select Meal Type</option>\n           {isToday&& currentHour <= 6 && <option value=\"Breakfast\">Breakfast (6 AM - 11 AM)</option>}\n-          {isToday && currentHour <=12 && <option value=\"Lunch\">Lunch (12 PM - 5 PM)</option>}\n+          {isToday && currentHour >= 12 && <option value=\"Lunch\">Lunch (12 PM - 5 PM)</option>}\n           {isToday && currentHour >= 17 && <option value=\"Dinner\">Dinner (6 PM - 11 PM)</option>}\n           {new Date(date) > new Date() && (\n             <>\n               <option value=\"Breakfast\">Breakfast (6 AM - 11 AM)</option>\n"
                },
                {
                    "date": 1738923676986,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -128,9 +128,9 @@\n           required\n         >\n           <option value=\"\" hidden>Select Meal Type</option>\n           {isToday&& currentHour <= 6 && <option value=\"Breakfast\">Breakfast (6 AM - 11 AM)</option>}\n-          {isToday && currentHour >= 12 && <option value=\"Lunch\">Lunch (12 PM - 5 PM)</option>}\n+          {isToday && currentHour >= 12 && currentHour <= 17 && <option value=\"Lunch\">Lunch (12 PM - 5 PM)</option>}\n           {isToday && currentHour >= 17 && <option value=\"Dinner\">Dinner (6 PM - 11 PM)</option>}\n           {new Date(date) > new Date() && (\n             <>\n               <option value=\"Breakfast\">Breakfast (6 AM - 11 AM)</option>\n"
                },
                {
                    "date": 1738923726801,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -128,10 +128,10 @@\n           required\n         >\n           <option value=\"\" hidden>Select Meal Type</option>\n           {isToday&& currentHour <= 6 && <option value=\"Breakfast\">Breakfast (6 AM - 11 AM)</option>}\n-          {isToday && currentHour >= 12 && currentHour <= 17 && <option value=\"Lunch\">Lunch (12 PM - 5 PM)</option>}\n-          {isToday && currentHour >= 17 && <option value=\"Dinner\">Dinner (6 PM - 11 PM)</option>}\n+          {isToday && currentHour >= 12 &&  <option value=\"Lunch\">Lunch (12 PM - 5 PM)</option>}\n+          {isToday && currentHour <= 17 && currentHour>= 17 && <option value=\"Dinner\">Dinner (6 PM - 11 PM)</option>}\n           {new Date(date) > new Date() && (\n             <>\n               <option value=\"Breakfast\">Breakfast (6 AM - 11 AM)</option>\n               <option value=\"Lunch\">Lunch (12 PM - 5 PM)</option>\n"
                },
                {
                    "date": 1738924146742,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -127,11 +127,11 @@\n           onChange={handleMealTypeChange}\n           required\n         >\n           <option value=\"\" hidden>Select Meal Type</option>\n-          {isToday&& currentHour <= 6 && <option value=\"Breakfast\">Breakfast (6 AM - 11 AM)</option>}\n-          {isToday && currentHour >= 12 &&  <option value=\"Lunch\">Lunch (12 PM - 5 PM)</option>}\n-          {isToday && currentHour <= 17 && currentHour>= 17 && <option value=\"Dinner\">Dinner (6 PM - 11 PM)</option>}\n+          {isToday&& currentHour <= 6 && <option value=\"Breakfast\">Breakfast (6 AM - 11 AM)</option>&&<option value=\"Lunch\">Lunch (12 PM - 5 PM)</option>&&<option value=\"Dinner\">Dinner (6 PM - 11 PM)</option>}\n+          {isToday && currentHour >= 12 &&  <option value=\"Lunch\">Lunch (12 PM - 5 PM)</option>&&<option value=\"Dinner\">Dinner (6 PM - 11 PM)</option>}\n+          {isToday && currentHour >= 17 && <option value=\"Dinner\">Dinner (6 PM - 11 PM)</option>}\n           {new Date(date) > new Date() && (\n             <>\n               <option value=\"Breakfast\">Breakfast (6 AM - 11 AM)</option>\n               <option value=\"Lunch\">Lunch (12 PM - 5 PM)</option>\n"
                },
                {
                    "date": 1738924190141,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -127,10 +127,10 @@\n           onChange={handleMealTypeChange}\n           required\n         >\n           <option value=\"\" hidden>Select Meal Type</option>\n-          {isToday&& currentHour <= 6 && <option value=\"Breakfast\">Breakfast (6 AM - 11 AM)</option>&&<option value=\"Lunch\">Lunch (12 PM - 5 PM)</option>&&<option value=\"Dinner\">Dinner (6 PM - 11 PM)</option>}\n-          {isToday && currentHour >= 12 &&  <option value=\"Lunch\">Lunch (12 PM - 5 PM)</option>&&<option value=\"Dinner\">Dinner (6 PM - 11 PM)</option>}\n+          {isToday&& currentHour <= 6 && <option value=\"Breakfast\">Breakfast (6 AM - 11 AM)</option>||<option value=\"Lunch\">Lunch (12 PM - 5 PM)</option>||<option value=\"Dinner\">Dinner (6 PM - 11 PM)</option>}\n+          {isToday && currentHour >= 12 &&  <option value=\"Lunch\">Lunch (12 PM - 5 PM)</option>||<option value=\"Dinner\">Dinner (6 PM - 11 PM)</option>}\n           {isToday && currentHour >= 17 && <option value=\"Dinner\">Dinner (6 PM - 11 PM)</option>}\n           {new Date(date) > new Date() && (\n             <>\n               <option value=\"Breakfast\">Breakfast (6 AM - 11 AM)</option>\n"
                },
                {
                    "date": 1738924270305,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -128,9 +128,9 @@\n           required\n         >\n           <option value=\"\" hidden>Select Meal Type</option>\n           {isToday&& currentHour <= 6 && <option value=\"Breakfast\">Breakfast (6 AM - 11 AM)</option>||<option value=\"Lunch\">Lunch (12 PM - 5 PM)</option>||<option value=\"Dinner\">Dinner (6 PM - 11 PM)</option>}\n-          {isToday && currentHour >= 12 &&  <option value=\"Lunch\">Lunch (12 PM - 5 PM)</option>||<option value=\"Dinner\">Dinner (6 PM - 11 PM)</option>}\n+          {isToday && currentHour >= 12 &&  <option value=\"Lunch\">Lunch (12 PM - 5 PM)</option>& <option value=\"Dinner\">Dinner (6 PM - 11 PM)</option>}\n           {isToday && currentHour >= 17 && <option value=\"Dinner\">Dinner (6 PM - 11 PM)</option>}\n           {new Date(date) > new Date() && (\n             <>\n               <option value=\"Breakfast\">Breakfast (6 AM - 11 AM)</option>\n"
                },
                {
                    "date": 1738924341150,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -127,10 +127,10 @@\n           onChange={handleMealTypeChange}\n           required\n         >\n           <option value=\"\" hidden>Select Meal Type</option>\n-          {isToday&& currentHour <= 6 && <option value=\"Breakfast\">Breakfast (6 AM - 11 AM)</option>||<option value=\"Lunch\">Lunch (12 PM - 5 PM)</option>||<option value=\"Dinner\">Dinner (6 PM - 11 PM)</option>}\n-          {isToday && currentHour >= 12 &&  <option value=\"Lunch\">Lunch (12 PM - 5 PM)</option>& <option value=\"Dinner\">Dinner (6 PM - 11 PM)</option>}\n+          {isToday&& currentHour <= 6 && <option value=\"Breakfast\">Breakfast (6 AM - 11 AM)</option>}\n+          {isToday && currentHour >= 12 &&  <option value=\"Lunch\">Lunch (12 PM - 5 PM)</option>}{<option value=\"Dinner\">Dinner (6 PM - 11 PM)</option>}\n           {isToday && currentHour >= 17 && <option value=\"Dinner\">Dinner (6 PM - 11 PM)</option>}\n           {new Date(date) > new Date() && (\n             <>\n               <option value=\"Breakfast\">Breakfast (6 AM - 11 AM)</option>\n"
                },
                {
                    "date": 1738924361721,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -127,9 +127,9 @@\n           onChange={handleMealTypeChange}\n           required\n         >\n           <option value=\"\" hidden>Select Meal Type</option>\n-          {isToday&& currentHour <= 6 && <option value=\"Breakfast\">Breakfast (6 AM - 11 AM)</option>}\n+          {isToday&& currentHour <= 6 && <option value=\"Breakfast\">Breakfast (6 AM - 11 AM)</option>}{<option value=\"Lunch\">Lunch (12 PM - 5 PM)</option>}{<option value=\"Dinner\">Dinner (6 PM - 11 PM)</option>}\n           {isToday && currentHour >= 12 &&  <option value=\"Lunch\">Lunch (12 PM - 5 PM)</option>}{<option value=\"Dinner\">Dinner (6 PM - 11 PM)</option>}\n           {isToday && currentHour >= 17 && <option value=\"Dinner\">Dinner (6 PM - 11 PM)</option>}\n           {new Date(date) > new Date() && (\n             <>\n"
                },
                {
                    "date": 1738924377920,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -127,9 +127,9 @@\n           onChange={handleMealTypeChange}\n           required\n         >\n           <option value=\"\" hidden>Select Meal Type</option>\n-          {isToday&& currentHour <= 6 && <option value=\"Breakfast\">Breakfast (6 AM - 11 AM)</option>}{<option value=\"Lunch\">Lunch (12 PM - 5 PM)</option>}{<option value=\"Dinner\">Dinner (6 PM - 11 PM)</option>}\n+          {isToday&& currentHour <= 6 && <option value=\"Breakfast\">Breakfast (6 AM - 11 AM)</option>}\n           {isToday && currentHour >= 12 &&  <option value=\"Lunch\">Lunch (12 PM - 5 PM)</option>}{<option value=\"Dinner\">Dinner (6 PM - 11 PM)</option>}\n           {isToday && currentHour >= 17 && <option value=\"Dinner\">Dinner (6 PM - 11 PM)</option>}\n           {new Date(date) > new Date() && (\n             <>\n"
                },
                {
                    "date": 1738924418105,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -128,9 +128,9 @@\n           required\n         >\n           <option value=\"\" hidden>Select Meal Type</option>\n           {isToday&& currentHour <= 6 && <option value=\"Breakfast\">Breakfast (6 AM - 11 AM)</option>}\n-          {isToday && currentHour >= 12 &&  <option value=\"Lunch\">Lunch (12 PM - 5 PM)</option>}{<option value=\"Dinner\">Dinner (6 PM - 11 PM)</option>}\n+          {isToday && currentHour >= 12 &&  <option value=\"Lunch\">Lunch (12 PM - 5 PM)</option>}&&{<option value=\"Dinner\">Dinner (6 PM - 11 PM)</option>}\n           {isToday && currentHour >= 17 && <option value=\"Dinner\">Dinner (6 PM - 11 PM)</option>}\n           {new Date(date) > new Date() && (\n             <>\n               <option value=\"Breakfast\">Breakfast (6 AM - 11 AM)</option>\n"
                },
                {
                    "date": 1738924497305,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -128,9 +128,9 @@\n           required\n         >\n           <option value=\"\" hidden>Select Meal Type</option>\n           {isToday&& currentHour <= 6 && <option value=\"Breakfast\">Breakfast (6 AM - 11 AM)</option>}\n-          {isToday && currentHour >= 12 &&  <option value=\"Lunch\">Lunch (12 PM - 5 PM)</option>}&&{<option value=\"Dinner\">Dinner (6 PM - 11 PM)</option>}\n+          {isToday && currentHour >= 12 &&  <option value=\"Lunch\">Lunch (12 PM - 5 PM)</option>}\n           {isToday && currentHour >= 17 && <option value=\"Dinner\">Dinner (6 PM - 11 PM)</option>}\n           {new Date(date) > new Date() && (\n             <>\n               <option value=\"Breakfast\">Breakfast (6 AM - 11 AM)</option>\n"
                },
                {
                    "date": 1738924836678,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -127,9 +127,16 @@\n           onChange={handleMealTypeChange}\n           required\n         >\n           <option value=\"\" hidden>Select Meal Type</option>\n-          {isToday&& currentHour <= 6 && <option value=\"Breakfast\">Breakfast (6 AM - 11 AM)</option>}\n+          {isToday&& currentHour <= 6 && \n+          (\n+            <>\n+          <option value=\"Breakfast\">Breakfast (6 AM - 11 AM)</option>\n+          <option value=\"Lunch\">Lunch (12 PM - 5 PM)</option>\n+          <option value=\"Dinner\">Dinner (6 PM - 11 PM)</option>\n+            </>\n+          )}\n           {isToday && currentHour >= 12 &&  <option value=\"Lunch\">Lunch (12 PM - 5 PM)</option>}\n           {isToday && currentHour >= 17 && <option value=\"Dinner\">Dinner (6 PM - 11 PM)</option>}\n           {new Date(date) > new Date() && (\n             <>\n"
                },
                {
                    "date": 1738924887467,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -135,9 +135,15 @@\n           <option value=\"Lunch\">Lunch (12 PM - 5 PM)</option>\n           <option value=\"Dinner\">Dinner (6 PM - 11 PM)</option>\n             </>\n           )}\n-          {isToday && currentHour >= 12 &&  <option value=\"Lunch\">Lunch (12 PM - 5 PM)</option>}\n+          {isToday && currentHour >= 12 && \n+          (\n+            <>\n+            <option value=\"Lunch\">Lunch (12 PM - 5 PM)</option>\n+            <option value=\"Dinner\">Dinner (6 PM - 11 PM)</option>\n+            </>\n+          ) }\n           {isToday && currentHour >= 17 && <option value=\"Dinner\">Dinner (6 PM - 11 PM)</option>}\n           {new Date(date) > new Date() && (\n             <>\n               <option value=\"Breakfast\">Breakfast (6 AM - 11 AM)</option>\n"
                },
                {
                    "date": 1739375310430,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,223 +1,223 @@\n-import { useState, useEffect } from \"react\";\n-import FormField from \"./formField\";\n-\n-const ReservationForm = ({ dispatchOnDateChange, submitData }) => {\n-  const minimumDate = new Date().toISOString().split(\"T\")[0]; // Get today's date\n-  const dineOptions = [\"Indoor\", \"Outdoor\",];\n-\n-  const convertTo12HourFormat = (time) => {\n-    let [hour, minute] = time.split(\":\").map(Number);\n-    let period = hour >= 12 ? \"PM\" : \"AM\";\n-    hour = hour > 12 ? hour - 12 : hour === 0 ? 12 : hour;\n-    return `${hour}:${minute === 0 ? \"00\" : minute} ${period}`;\n-  };\n-\n-  const allTimes = [\n-    \"06:00\", \"06:30\", \"07:00\", \"07:30\", \"08:00\", \"08:30\", \"09:00\", \"09:30\", \"10:00\", \"10:30\", \"11:00\", \"11:30\",//breakfast\n-    \"12:00\", \"12:30\", \"13:00\", \"13:30\", \"14:00\", \"14:30\", \"15:00\", \"15:30\", \"16:00\", \"16:30\", \"17:00\", // Lunch\n-    \"18:00\", \"18:30\", \"19:00\", \"19:30\", \"20:00\", \"20:30\", \"21:00\", \"21:30\", \"22:00\", \"22:30\", \"23:00\"  // Dinner\n-  ];\n-\n-  const [date, setDate] = useState(minimumDate); // Default to today's date\n-  const [mealType, setMealType] = useState(\"\"); // Default: No meal type selected\n-  const [time, setTime] = useState(\"\");\n-  const [numberOfGuests, setNumberGuests] = useState(\"\");\n-  const [dineIN, setDineIN] = useState(\"\");\n-  const [showAllSlots, setShowAllSlots] = useState(false);\n-  const [currentTime, setCurrentTime] = useState(null);\n-\n-  useEffect(() => {\n-    const currentTime = new Date();\n-    setCurrentTime(currentTime);\n-  }, []);\n-\n-  const isToday = new Date(date).toDateString() === new Date().toDateString();\n-  const currentHour = currentTime ? currentTime.getHours() : 0;\n-  const currentMinute = currentTime ? currentTime.getMinutes() : 0;\n-\n-  // Function to check if the time slot is available based on the current time\n-  const isTimeAvailable = (time) => {\n-    const [slotHour, slotMinute] = time.split(\":\").map(Number);\n-    return (slotHour > currentHour) || (slotHour === currentHour && slotMinute > currentMinute);\n-  };\n-\n-  // Filtered times logic based on the new condition\n-  const filteredTimes = allTimes\n-    .filter((time) => {\n-      const hour = parseInt(time.split(\":\")[0]);\n-      const [slotHour, slotMinute] = time.split(\":\").map(Number);\n-\n-      // If the booking date is not today, show both lunch and dinner time slots without checking time\n-      if (new Date(date) > new Date()) {\n-        return (\n-          (mealType === \"Breakfast\" && hour >= 6 && hour <= 11) ||\n-          (mealType === \"Lunch\" && hour >= 12 && hour <= 17) ||\n-          (mealType === \"Dinner\" && hour >= 18 && hour <= 23)\n-        );\n-      }\n-\n-      // If the booking date is today, show only the applicable meal type based on current time\n-      if (isToday) {\n-        if (mealType === \"Breakfast\" && hour >= 6 && hour <= 11) {\n-          return (slotHour > currentHour) || (slotHour === currentHour && slotMinute > currentMinute);\n-        }\n-        if (mealType === \"Lunch\" && hour >= 12 && hour <= 17) {\n-          return (slotHour > currentHour) || (slotHour === currentHour && slotMinute > currentMinute);\n-        }\n-        if (mealType === \"Dinner\" && hour >= 18 && hour <= 23) {\n-          return (slotHour > currentHour) || (slotHour === currentHour && slotMinute > currentMinute);\n-        }\n-      }\n-\n-      return false;\n-    })\n-    .map((time) => ({\n-      value: time,\n-      label: convertTo12HourFormat(time),\n-    }));\n-\n-  const handleDateChange = (e) => {\n-    setDate(e.target.value);\n-    dispatchOnDateChange(e.target.value);\n-  };\n-\n-  const handleMealTypeChange = (e) => {\n-    setMealType(e.target.value);\n-    setTime(\"\"); // Reset time when meal type changes\n-  };\n-\n-  const handleTimeChange = (value) => {\n-    setTime(value); // Update time slot without triggering validation\n-  };\n-\n-  const handleFormSubmit = (e) => {\n-    e.preventDefault();\n-\n-    // Check if all required fields are filled\n-    if (!date || !mealType || !time || !numberOfGuests || !dineIN) {\n-      alert(\"Please fill out all required fields.\");\n-      return;\n-    }\n-\n-    submitData({ date, mealType, time, numberOfGuests, dineIN });\n-  };\n-\n-  // Check if the form is valid\n-  const isFormValid = () => {\n-    return date && mealType && time && numberOfGuests && dineIN;\n-  };\n-\n-  return (\n-    <form onSubmit={handleFormSubmit}>\n-      <FormField label=\"Date\" htmlFor=\"reservation-date\">\n-        <input\n-          type=\"date\"\n-          id=\"reservation-date\"\n-          value={date}\n-          min={minimumDate} // Prevent selecting past dates\n-          onChange={handleDateChange}\n-          required\n-        />\n-      </FormField>\n-\n-      <FormField label=\"Meal Type\" htmlFor=\"meal-type\">\n-        <select\n-          id=\"meal-type\"\n-          value={mealType}\n-          onChange={handleMealTypeChange}\n-          required\n-        >\n-          <option value=\"\" hidden>Select Meal Type</option>\n-          {isToday&& currentHour <= 6 && \n-          (\n-            <>\n-          <option value=\"Breakfast\">Breakfast (6 AM - 11 AM)</option>\n-          <option value=\"Lunch\">Lunch (12 PM - 5 PM)</option>\n-          <option value=\"Dinner\">Dinner (6 PM - 11 PM)</option>\n-            </>\n-          )}\n-          {isToday && currentHour >= 12 && \n-          (\n-            <>\n-            <option value=\"Lunch\">Lunch (12 PM - 5 PM)</option>\n-            <option value=\"Dinner\">Dinner (6 PM - 11 PM)</option>\n-            </>\n-          ) }\n-          {isToday && currentHour >= 17 && <option value=\"Dinner\">Dinner (6 PM - 11 PM)</option>}\n-          {new Date(date) > new Date() && (\n-            <>\n-              <option value=\"Breakfast\">Breakfast (6 AM - 11 AM)</option>\n-              <option value=\"Lunch\">Lunch (12 PM - 5 PM)</option>\n-              <option value=\"Dinner\">Dinner (6 PM - 11 PM)</option>\n-            </>\n-          )}\n-        </select>\n-      </FormField>\n-\n-      <FormField label=\"Time\" htmlFor=\"reservation-time\">\n-        <div className=\"time-slots\">\n-          {filteredTimes.slice(0, showAllSlots ? filteredTimes.length : 4).map(({ value, label }) => (\n-            <button\n-              key={value}\n-              className={`${time === value ? \"selected\" : \"\"} ${!isTimeAvailable(value) && new Date(date) <= new Date() ? \"unavailable\" : \"\"}`}\n-              onClick={() => handleTimeChange(value)} // Call time change function without validation\n-              disabled={new Date(date) <= new Date() && !isTimeAvailable(value)} // Only disable if time is in the past and date is today\n-            >\n-              {label}\n-            </button>\n-          ))}\n-        </div>\n-\n-        {/* Show More button */}\n-        {filteredTimes.length > 4 && (\n-          <button\n-            type=\"button\"\n-            onClick={() => setShowAllSlots(!showAllSlots)}\n-            className=\"show-more-btn\"\n-          >\n-            {showAllSlots ? \"Show Less\" : \"Show More\"}\n-          </button>\n-        )}\n-      </FormField>\n-\n-      {/* Render fields only when time is selected */}\n-      {time && (\n-        <>\n-          <FormField label=\"Number of guests (max upto 10)\" htmlFor=\"reservation-number-guests\">\n-            <input\n-              type=\"number\"\n-              id=\"reservation-number-guests\"\n-              value={numberOfGuests}\n-              min=\"1\"\n-              max=\"10\"\n-              onChange={(e) => setNumberGuests(e.target.value)}\n-              required\n-            />\n-          </FormField>\n-\n-          <FormField label=\"Dine In\">\n-  <div className=\"dine-in-options\">\n-    {dineOptions.map((option) => (\n-      <button\n-        key={option}\n-        type=\"button\"\n-        className={`dine-in-btn ${dineIN === option ? \"selected\" : \"\"}`}\n-        onClick={() => setDineIN(option)}\n-      >\n-        {option}\n-      </button>\n-    ))}\n-  </div>\n-</FormField>\n-\n-        </>\n-      )}\n-\n-      <button className=\"button-primary\" type=\"submit\" disabled={!isFormValid()}>\n-        Reserve now!\n-      </button>\n-    </form>\n-  );\n-};\n-\n-export default ReservationForm;\n+import { useState, useEffect } from \"react\";\r\n+import FormField from \"./formField\";\r\n+\r\n+const ReservationForm = ({ dispatchOnDateChange, submitData }) => {\r\n+  const minimumDate = new Date().toISOString().split(\"T\")[0]; // Get today's date\r\n+  const dineOptions = [\"Indoor\", \"Outdoor\",];\r\n+\r\n+  const convertTo12HourFormat = (time) => {\r\n+    let [hour, minute] = time.split(\":\").map(Number);\r\n+    let period = hour >= 12 ? \"PM\" : \"AM\";\r\n+    hour = hour > 12 ? hour - 12 : hour === 0 ? 12 : hour;\r\n+    return `${hour}:${minute === 0 ? \"00\" : minute} ${period}`;\r\n+  };\r\n+\r\n+  const allTimes = [\r\n+    \"06:00\", \"06:30\", \"07:00\", \"07:30\", \"08:00\", \"08:30\", \"09:00\", \"09:30\", \"10:00\", \"10:30\", \"11:00\", \"11:30\",//breakfast\r\n+    \"12:00\", \"12:30\", \"13:00\", \"13:30\", \"14:00\", \"14:30\", \"15:00\", \"15:30\", \"16:00\", \"16:30\", \"17:00\", // Lunch\r\n+    \"18:00\", \"18:30\", \"19:00\", \"19:30\", \"20:00\", \"20:30\", \"21:00\", \"21:30\", \"22:00\", \"22:30\", \"23:00\"  // Dinner\r\n+  ];\r\n+\r\n+  const [date, setDate] = useState(minimumDate); // Default to today's date\r\n+  const [mealType, setMealType] = useState(\"\"); // Default: No meal type selected\r\n+  const [time, setTime] = useState(\"\");\r\n+  const [numberOfGuests, setNumberGuests] = useState(\"\");\r\n+  const [dineIN, setDineIN] = useState(\"\");\r\n+  const [showAllSlots, setShowAllSlots] = useState(false);\r\n+  const [currentTime, setCurrentTime] = useState(null);\r\n+\r\n+  useEffect(() => {\r\n+    const currentTime = new Date();\r\n+    setCurrentTime(currentTime);\r\n+  }, []);\r\n+\r\n+  const isToday = new Date(date).toDateString() === new Date().toDateString();\r\n+  const currentHour = currentTime ? currentTime.getHours() : 0;\r\n+  const currentMinute = currentTime ? currentTime.getMinutes() : 0;\r\n+\r\n+  // Function to check if the time slot is available based on the current time\r\n+  const isTimeAvailable = (time) => {\r\n+    const [slotHour, slotMinute] = time.split(\":\").map(Number);\r\n+    return (slotHour > currentHour) || (slotHour === currentHour && slotMinute > currentMinute);\r\n+  };\r\n+\r\n+  // Filtered times logic based on the new condition\r\n+  const filteredTimes = allTimes\r\n+    .filter((time) => {\r\n+      const hour = parseInt(time.split(\":\")[0]);\r\n+      const [slotHour, slotMinute] = time.split(\":\").map(Number);\r\n+\r\n+      // If the booking date is not today, show both lunch and dinner time slots without checking time\r\n+      if (new Date(date) > new Date()) {\r\n+        return (\r\n+          (mealType === \"Breakfast\" && hour >= 6 && hour <= 11) ||\r\n+          (mealType === \"Lunch\" && hour >= 12 && hour <= 17) ||\r\n+          (mealType === \"Dinner\" && hour >= 18 && hour <= 23)\r\n+        );\r\n+      }\r\n+\r\n+      // If the booking date is today, show only the applicable meal type based on current time\r\n+      if (isToday) {\r\n+        if (mealType === \"Breakfast\" && hour >= 6 && hour <= 11) {\r\n+          return (slotHour > currentHour) || (slotHour === currentHour && slotMinute > currentMinute);\r\n+        }\r\n+        if (mealType === \"Lunch\" && hour >= 12 && hour <= 17) {\r\n+          return (slotHour > currentHour) || (slotHour === currentHour && slotMinute > currentMinute);\r\n+        }\r\n+        if (mealType === \"Dinner\" && hour >= 18 && hour <= 23) {\r\n+          return (slotHour > currentHour) || (slotHour === currentHour && slotMinute > currentMinute);\r\n+        }\r\n+      }\r\n+\r\n+      return false;\r\n+    })\r\n+    .map((time) => ({\r\n+      value: time,\r\n+      label: convertTo12HourFormat(time),\r\n+    }));\r\n+\r\n+  const handleDateChange = (e) => {\r\n+    setDate(e.target.value);\r\n+    dispatchOnDateChange(e.target.value);\r\n+  };\r\n+\r\n+  const handleMealTypeChange = (e) => {\r\n+    setMealType(e.target.value);\r\n+    setTime(\"\"); // Reset time when meal type changes\r\n+  };\r\n+\r\n+  const handleTimeChange = (value) => {\r\n+    setTime(value); // Update time slot without triggering validation\r\n+  };\r\n+\r\n+  const handleFormSubmit = (e) => {\r\n+    e.preventDefault();\r\n+\r\n+    // Check if all required fields are filled\r\n+    if (!date || !mealType || !time || !numberOfGuests || !dineIN) {\r\n+      alert(\"Please fill out all required fields.\");\r\n+      return;\r\n+    }\r\n+\r\n+    submitData({ date, mealType, time, numberOfGuests, dineIN });\r\n+  };\r\n+\r\n+  // Check if the form is valid\r\n+  const isFormValid = () => {\r\n+    return date && mealType && time && numberOfGuests && dineIN;\r\n+  };\r\n+\r\n+  return (\r\n+    <form onSubmit={handleFormSubmit}>\r\n+      <FormField label=\"Date\" htmlFor=\"reservation-date\">\r\n+        <input\r\n+          type=\"date\"\r\n+          id=\"reservation-date\"\r\n+          value={date}\r\n+          min={minimumDate} // Prevent selecting past dates\r\n+          onChange={handleDateChange}\r\n+          required\r\n+        />\r\n+      </FormField>\r\n+\r\n+      <FormField label=\"Meal Type\" htmlFor=\"meal-type\">\r\n+        <select\r\n+          id=\"meal-type\"\r\n+          value={mealType}\r\n+          onChange={handleMealTypeChange}\r\n+          required\r\n+        >\r\n+          <option value=\"\" hidden>Select Meal Type</option>\r\n+          {isToday&& currentHour < 6 && \r\n+          (\r\n+            <>\r\n+          <option value=\"Breakfast\">Breakfast (6 AM - 11 AM)</option>\r\n+          <option value=\"Lunch\">Lunch (12 PM - 5 PM)</option>\r\n+          <option value=\"Dinner\">Dinner (6 PM - 11 PM)</option>\r\n+            </>\r\n+          )}\r\n+          {isToday && currentHour >= 12 && \r\n+          (\r\n+            <>\r\n+            <option value=\"Lunch\">Lunch (12 PM - 5 PM)</option>\r\n+            <option value=\"Dinner\">Dinner (6 PM - 11 PM)</option>\r\n+            </>\r\n+          ) }\r\n+          {isToday && currentHour >= 17 && <option value=\"Dinner\">Dinner (6 PM - 11 PM)</option>}\r\n+          {new Date(date) > new Date() && (\r\n+            <>\r\n+              <option value=\"Breakfast\">Breakfast (6 AM - 11 AM)</option>\r\n+              <option value=\"Lunch\">Lunch (12 PM - 5 PM)</option>\r\n+              <option value=\"Dinner\">Dinner (6 PM - 11 PM)</option>\r\n+            </>\r\n+          )}\r\n+        </select>\r\n+      </FormField>\r\n+\r\n+      <FormField label=\"Time\" htmlFor=\"reservation-time\">\r\n+        <div className=\"time-slots\">\r\n+          {filteredTimes.slice(0, showAllSlots ? filteredTimes.length : 4).map(({ value, label }) => (\r\n+            <button\r\n+              key={value}\r\n+              className={`${time === value ? \"selected\" : \"\"} ${!isTimeAvailable(value) && new Date(date) <= new Date() ? \"unavailable\" : \"\"}`}\r\n+              onClick={() => handleTimeChange(value)} // Call time change function without validation\r\n+              disabled={new Date(date) <= new Date() && !isTimeAvailable(value)} // Only disable if time is in the past and date is today\r\n+            >\r\n+              {label}\r\n+            </button>\r\n+          ))}\r\n+        </div>\r\n+\r\n+        {/* Show More button */}\r\n+        {filteredTimes.length > 4 && (\r\n+          <button\r\n+            type=\"button\"\r\n+            onClick={() => setShowAllSlots(!showAllSlots)}\r\n+            className=\"show-more-btn\"\r\n+          >\r\n+            {showAllSlots ? \"Show Less\" : \"Show More\"}\r\n+          </button>\r\n+        )}\r\n+      </FormField>\r\n+\r\n+      {/* Render fields only when time is selected */}\r\n+      {time && (\r\n+        <>\r\n+          <FormField label=\"Number of guests (max upto 10)\" htmlFor=\"reservation-number-guests\">\r\n+            <input\r\n+              type=\"number\"\r\n+              id=\"reservation-number-guests\"\r\n+              value={numberOfGuests}\r\n+              min=\"1\"\r\n+              max=\"10\"\r\n+              onChange={(e) => setNumberGuests(e.target.value)}\r\n+              required\r\n+            />\r\n+          </FormField>\r\n+\r\n+          <FormField label=\"Dine In\">\r\n+  <div className=\"dine-in-options\">\r\n+    {dineOptions.map((option) => (\r\n+      <button\r\n+        key={option}\r\n+        type=\"button\"\r\n+        className={`dine-in-btn ${dineIN === option ? \"selected\" : \"\"}`}\r\n+        onClick={() => setDineIN(option)}\r\n+      >\r\n+        {option}\r\n+      </button>\r\n+    ))}\r\n+  </div>\r\n+</FormField>\r\n+\r\n+        </>\r\n+      )}\r\n+\r\n+      <button className=\"button-primary\" type=\"submit\" disabled={!isFormValid()}>\r\n+        Reserve now!\r\n+      </button>\r\n+    </form>\r\n+  );\r\n+};\r\n+\r\n+export default ReservationForm;\r\n"
                },
                {
                    "date": 1739375330387,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -135,9 +135,9 @@\n           <option value=\"Lunch\">Lunch (12 PM - 5 PM)</option>\r\n           <option value=\"Dinner\">Dinner (6 PM - 11 PM)</option>\r\n             </>\r\n           )}\r\n-          {isToday && currentHour >= 12 && \r\n+          {isToday && currentHour > 12 && \r\n           (\r\n             <>\r\n             <option value=\"Lunch\">Lunch (12 PM - 5 PM)</option>\r\n             <option value=\"Dinner\">Dinner (6 PM - 11 PM)</option>\r\n"
                },
                {
                    "date": 1739375382517,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -127,17 +127,17 @@\n           onChange={handleMealTypeChange}\r\n           required\r\n         >\r\n           <option value=\"\" hidden>Select Meal Type</option>\r\n-          {isToday&& currentHour < 6 && \r\n+          {isToday&& currentHour <= 6 && isToday && currentHour >= 6 &&\r\n           (\r\n             <>\r\n           <option value=\"Breakfast\">Breakfast (6 AM - 11 AM)</option>\r\n           <option value=\"Lunch\">Lunch (12 PM - 5 PM)</option>\r\n           <option value=\"Dinner\">Dinner (6 PM - 11 PM)</option>\r\n             </>\r\n           )}\r\n-          {isToday && currentHour > 12 && \r\n+          {isToday && currentHour >= 12 && \r\n           (\r\n             <>\r\n             <option value=\"Lunch\">Lunch (12 PM - 5 PM)</option>\r\n             <option value=\"Dinner\">Dinner (6 PM - 11 PM)</option>\r\n"
                },
                {
                    "date": 1739375406425,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -135,9 +135,9 @@\n           <option value=\"Lunch\">Lunch (12 PM - 5 PM)</option>\r\n           <option value=\"Dinner\">Dinner (6 PM - 11 PM)</option>\r\n             </>\r\n           )}\r\n-          {isToday && currentHour >= 12 && \r\n+          {isToday && currentHour >= 12 && isToday && currentHour <= 17 &&\r\n           (\r\n             <>\r\n             <option value=\"Lunch\">Lunch (12 PM - 5 PM)</option>\r\n             <option value=\"Dinner\">Dinner (6 PM - 11 PM)</option>\r\n"
                }
            ],
            "date": 1738920323015,
            "name": "Commit-0",
            "content": "import { useState, useEffect } from \"react\";\nimport FormField from \"./formField\";\n\nconst ReservationForm = ({ dispatchOnDateChange, submitData }) => {\n  const minimumDate = new Date().toISOString().split(\"T\")[0]; // Get today's date\n  const occasions = [\"Indoor\", \"Outdoor\",];\n\n  const convertTo12HourFormat = (time) => {\n    let [hour, minute] = time.split(\":\").map(Number);\n    let period = hour >= 12 ? \"PM\" : \"AM\";\n    hour = hour > 12 ? hour - 12 : hour === 0 ? 12 : hour;\n    return `${hour}:${minute === 0 ? \"00\" : minute} ${period}`;\n  };\n\n  const allTimes = [\n    \"12:00\", \"12:30\", \"13:00\", \"13:30\", \"14:00\", \"14:30\", \"15:00\", \"15:30\", \"16:00\", \"16:30\", \"17:00\", // Lunch\n    \"18:00\", \"18:30\", \"19:00\", \"19:30\", \"20:00\", \"20:30\", \"21:00\", \"21:30\", \"22:00\", \"22:30\", \"23:00\"  // Dinner\n  ];\n\n  const [date, setDate] = useState(minimumDate); // Default to today's date\n  const [mealType, setMealType] = useState(\"\"); // Default: No meal type selected\n  const [time, setTime] = useState(\"\");\n  const [numberOfGuests, setNumberGuests] = useState(\"\");\n  const [occasion, setOccasion] = useState(\"\");\n  const [showAllSlots, setShowAllSlots] = useState(false);\n  const [currentTime, setCurrentTime] = useState(null);\n\n  useEffect(() => {\n    const currentTime = new Date();\n    setCurrentTime(currentTime);\n  }, []);\n\n  const isToday = new Date(date).toDateString() === new Date().toDateString();\n  const currentHour = currentTime ? currentTime.getHours() : 0;\n  const currentMinute = currentTime ? currentTime.getMinutes() : 0;\n\n  // Function to check if the time slot is available based on the current time\n  const isTimeAvailable = (time) => {\n    const [slotHour, slotMinute] = time.split(\":\").map(Number);\n    return (slotHour > currentHour) || (slotHour === currentHour && slotMinute > currentMinute);\n  };\n\n  // Filtered times logic based on the new condition\n  const filteredTimes = allTimes\n    .filter((time) => {\n      const hour = parseInt(time.split(\":\")[0]);\n      const [slotHour, slotMinute] = time.split(\":\").map(Number);\n\n      // If the booking date is not today, show both lunch and dinner time slots without checking time\n      if (new Date(date) > new Date()) {\n        return (\n          (mealType === \"Lunch\" && hour >= 12 && hour <= 17) ||\n          (mealType === \"Dinner\" && hour >= 18 && hour <= 23)\n        );\n      }\n\n      // If the booking date is today, show only the applicable meal type based on current time\n      if (isToday) {\n        if (mealType === \"Lunch\" && hour >= 12 && hour <= 17) {\n          return (slotHour > currentHour) || (slotHour === currentHour && slotMinute > currentMinute);\n        }\n        if (mealType === \"Dinner\" && hour >= 18 && hour <= 23) {\n          return (slotHour > currentHour) || (slotHour === currentHour && slotMinute > currentMinute);\n        }\n      }\n\n      return false;\n    })\n    .map((time) => ({\n      value: time,\n      label: convertTo12HourFormat(time),\n    }));\n\n  const handleDateChange = (e) => {\n    setDate(e.target.value);\n    dispatchOnDateChange(e.target.value);\n  };\n\n  const handleMealTypeChange = (e) => {\n    setMealType(e.target.value);\n    setTime(\"\"); // Reset time when meal type changes\n  };\n\n  const handleTimeChange = (value) => {\n    setTime(value); // Update time slot without triggering validation\n  };\n\n  const handleFormSubmit = (e) => {\n    e.preventDefault();\n\n    // Check if all required fields are filled\n    if (!date || !mealType || !time || !numberOfGuests || !occasion) {\n      alert(\"Please fill out all required fields.\");\n      return;\n    }\n\n    submitData({ date, mealType, time, numberOfGuests, occasion });\n  };\n\n  // Check if the form is valid\n  const isFormValid = () => {\n    return date && mealType && time && numberOfGuests && occasion;\n  };\n\n  return (\n    <form onSubmit={handleFormSubmit}>\n      <FormField label=\"Date\" htmlFor=\"reservation-date\">\n        <input\n          type=\"date\"\n          id=\"reservation-date\"\n          value={date}\n          min={minimumDate} // Prevent selecting past dates\n          onChange={handleDateChange}\n          required\n        />\n      </FormField>\n\n      <FormField label=\"Meal Type\" htmlFor=\"meal-type\">\n        <select\n          id=\"meal-type\"\n          value={mealType}\n          onChange={handleMealTypeChange}\n          required\n        >\n          <option value=\"\" hidden>Select Meal Type</option>\n          {isToday && currentHour < 17 && <option value=\"Lunch\">Lunch (12 PM - 5 PM)</option>}\n          {isToday && currentHour >= 17 && <option value=\"Dinner\">Dinner (6 PM - 11 PM)</option>}\n          {new Date(date) > new Date() && (\n            <>\n              <option value=\"Lunch\">Lunch (12 PM - 5 PM)</option>\n              <option value=\"Dinner\">Dinner (6 PM - 11 PM)</option>\n            </>\n          )}\n        </select>\n      </FormField>\n\n      <FormField label=\"Time\" htmlFor=\"reservation-time\">\n        <div className=\"time-slots\">\n          {filteredTimes.slice(0, showAllSlots ? filteredTimes.length : 4).map(({ value, label }) => (\n            <button\n              key={value}\n              className={`${time === value ? \"selected\" : \"\"} ${!isTimeAvailable(value) && new Date(date) <= new Date() ? \"unavailable\" : \"\"}`}\n              onClick={() => handleTimeChange(value)} // Call time change function without validation\n              disabled={new Date(date) <= new Date() && !isTimeAvailable(value)} // Only disable if time is in the past and date is today\n            >\n              {label}\n            </button>\n          ))}\n        </div>\n\n        {/* Show More button */}\n        {filteredTimes.length > 4 && (\n          <button\n            type=\"button\"\n            onClick={() => setShowAllSlots(!showAllSlots)}\n            className=\"show-more-btn\"\n          >\n            {showAllSlots ? \"Show Less\" : \"Show More\"}\n          </button>\n        )}\n      </FormField>\n\n      {/* Render fields only when time is selected */}\n      {time && (\n        <>\n          <FormField label=\"Number of guests (max upto 10)\" htmlFor=\"reservation-number-guests\">\n            <input\n              type=\"number\"\n              id=\"reservation-number-guests\"\n              value={numberOfGuests}\n              min=\"1\"\n              max=\"10\"\n              onChange={(e) => setNumberGuests(e.target.value)}\n              required\n            />\n          </FormField>\n\n          <FormField label=\"Occasion\" htmlFor=\"reservation-occasion\">\n            <select\n              id=\"reservation-occasion\"\n              value={occasion}\n              onChange={(e) => setOccasion(e.target.value)}\n              required\n            >\n              <option value=\"\">Select Occasion</option>\n              {occasions.map((occasion) => (\n                <option key={occasion} value={occasion}>{occasion}</option>\n              ))}\n            </select>\n          </FormField>\n        </>\n      )}\n\n      <button className=\"button-primary\" type=\"submit\" disabled={!isFormValid()}>\n        Reserve now!\n      </button>\n    </form>\n  );\n};\n\nexport default ReservationForm;\n"
        }
    ]
}