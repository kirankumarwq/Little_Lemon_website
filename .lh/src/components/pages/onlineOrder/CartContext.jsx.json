{
    "sourceFile": "src/components/pages/onlineOrder/CartContext.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 8,
            "patches": [
                {
                    "date": 1739400618226,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1739400634295,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,36 @@\n+import React, { createContext, useContext, useState } from \"react\";\r\n+\r\n+const CartContext = createContext();\r\n+\r\n+export const CartProvider = ({ children }) => {\r\n+  const [cart, setCart] = useState({});\r\n+\r\n+  const addToCart = (item) => {\r\n+    setCart((prevCart) => ({\r\n+      ...prevCart,\r\n+      [item.title]: prevCart[item.title] ? prevCart[item.title] + 1 : 1,\r\n+    }));\r\n+  };\r\n+\r\n+  const removeFromCart = (item) => {\r\n+    setCart((prevCart) => {\r\n+      const newCart = { ...prevCart };\r\n+      if (newCart[item.title] > 1) {\r\n+        newCart[item.title] -= 1;\r\n+      } else {\r\n+        delete newCart[item.title];\r\n+      }\r\n+      return newCart;\r\n+    });\r\n+  };\r\n+\r\n+  const totalItems = Object.values(cart).reduce((acc, qty) => acc + qty, 0);\r\n+\r\n+  return (\r\n+    <CartContext.Provider value={{ cart, addToCart, removeFromCart, totalItems }}>\r\n+      {children}\r\n+    </CartContext.Provider>\r\n+  );\r\n+};\r\n+\r\n+export const useCart = () => useContext(CartContext);\r\n"
                },
                {
                    "date": 1739402123336,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,36 +1,31 @@\n-import React, { createContext, useContext, useState } from \"react\";\r\n+import { createContext, useContext, useState, useEffect } from \"react\";\r\n \r\n const CartContext = createContext();\r\n \r\n export const CartProvider = ({ children }) => {\r\n-  const [cart, setCart] = useState({});\r\n+  const [cartItems, setCartItems] = useState([]);\r\n \r\n-  const addToCart = (item) => {\r\n-    setCart((prevCart) => ({\r\n-      ...prevCart,\r\n-      [item.title]: prevCart[item.title] ? prevCart[item.title] + 1 : 1,\r\n-    }));\r\n-  };\r\n+  useEffect(() => {\r\n+    // Load cart from localStorage to persist data on refresh\r\n+    const savedCart = JSON.parse(localStorage.getItem(\"cart\")) || [];\r\n+    setCartItems(savedCart);\r\n+  }, []);\r\n \r\n-  const removeFromCart = (item) => {\r\n-    setCart((prevCart) => {\r\n-      const newCart = { ...prevCart };\r\n-      if (newCart[item.title] > 1) {\r\n-        newCart[item.title] -= 1;\r\n-      } else {\r\n-        delete newCart[item.title];\r\n-      }\r\n-      return newCart;\r\n-    });\r\n-  };\r\n+  useEffect(() => {\r\n+    // Save cart to localStorage whenever it changes\r\n+    localStorage.setItem(\"cart\", JSON.stringify(cartItems));\r\n+  }, [cartItems]);\r\n \r\n-  const totalItems = Object.values(cart).reduce((acc, qty) => acc + qty, 0);\r\n+  // ✅ Dynamically update total cart count in real-time\r\n+  const totalItems = cartItems.reduce((sum, item) => sum + item.quantity, 0);\r\n \r\n   return (\r\n-    <CartContext.Provider value={{ cart, addToCart, removeFromCart, totalItems }}>\r\n+    <CartContext.Provider value={{ cartItems, setCartItems, totalItems }}>\r\n       {children}\r\n     </CartContext.Provider>\r\n   );\r\n };\r\n \r\n-export const useCart = () => useContext(CartContext);\r\n+export const useCart = () => {\r\n+  return useContext(CartContext);\r\n+};\r\n"
                },
                {
                    "date": 1739402583513,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,30 +2,23 @@\n \r\n const CartContext = createContext();\r\n \r\n export const CartProvider = ({ children }) => {\r\n-  const [cartItems, setCartItems] = useState([]);\r\n+  const [cartItems, setCartItems] = useState(() => {\r\n+    const storedCart = localStorage.getItem(\"cart\");\r\n+    return storedCart ? JSON.parse(storedCart) : [];\r\n+  });\r\n \r\n+  // ✅ Sync cart with localStorage\r\n   useEffect(() => {\r\n-    // Load cart from localStorage to persist data on refresh\r\n-    const savedCart = JSON.parse(localStorage.getItem(\"cart\")) || [];\r\n-    setCartItems(savedCart);\r\n-  }, []);\r\n-\r\n-  useEffect(() => {\r\n-    // Save cart to localStorage whenever it changes\r\n+    console.log(\"Cart Updated:\", cartItems);\r\n     localStorage.setItem(\"cart\", JSON.stringify(cartItems));\r\n   }, [cartItems]);\r\n \r\n-  // ✅ Dynamically update total cart count in real-time\r\n-  const totalItems = cartItems.reduce((sum, item) => sum + item.quantity, 0);\r\n-\r\n   return (\r\n-    <CartContext.Provider value={{ cartItems, setCartItems, totalItems }}>\r\n+    <CartContext.Provider value={{ cartItems, setCartItems }}>\r\n       {children}\r\n     </CartContext.Provider>\r\n   );\r\n };\r\n \r\n-export const useCart = () => {\r\n-  return useContext(CartContext);\r\n-};\r\n+export const useCart = () => useContext(CartContext);\r\n"
                },
                {
                    "date": 1739403374054,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,22 +1,34 @@\n-import { createContext, useContext, useState, useEffect } from \"react\";\r\n+import { createContext, useContext, useState } from \"react\";\r\n \r\n const CartContext = createContext();\r\n \r\n export const CartProvider = ({ children }) => {\r\n-  const [cartItems, setCartItems] = useState(() => {\r\n-    const storedCart = localStorage.getItem(\"cart\");\r\n-    return storedCart ? JSON.parse(storedCart) : [];\r\n-  });\r\n+  const [cart, setCart] = useState({});\r\n \r\n-  // ✅ Sync cart with localStorage\r\n-  useEffect(() => {\r\n-    console.log(\"Cart Updated:\", cartItems);\r\n-    localStorage.setItem(\"cart\", JSON.stringify(cartItems));\r\n-  }, [cartItems]);\r\n+  const addToCart = (item) => {\r\n+    setCart((prevCart) => ({\r\n+      ...prevCart,\r\n+      [item.title]: (prevCart[item.title] || 0) + 1,\r\n+    }));\r\n+  };\r\n \r\n+  const removeFromCart = (item) => {\r\n+    setCart((prevCart) => {\r\n+      const newCart = { ...prevCart };\r\n+      if (newCart[item.title] > 1) {\r\n+        newCart[item.title] -= 1;\r\n+      } else {\r\n+        delete newCart[item.title];\r\n+      }\r\n+      return newCart;\r\n+    });\r\n+  };\r\n+\r\n+  const totalItems = Object.values(cart).reduce((acc, qty) => acc + qty, 0);\r\n+\r\n   return (\r\n-    <CartContext.Provider value={{ cartItems, setCartItems }}>\r\n+    <CartContext.Provider value={{ cart, addToCart, removeFromCart, totalItems }}>\r\n       {children}\r\n     </CartContext.Provider>\r\n   );\r\n };\r\n"
                },
                {
                    "date": 1739403507939,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,36 +1,69 @@\n-import { createContext, useContext, useState } from \"react\";\r\n+import Header from \"./Header\";\r\n+import Footer from \"./Footer\";\r\n+import { supabase } from \"../../supabaseConfig\";\r\n+import { useState, useEffect } from \"react\";\r\n+import BottomNav from \"./BottomNav\";\r\n+import { useCart } from \"../../components/pages/onlineOrder/CartContext\";\r\n \r\n-const CartContext = createContext();\r\n \r\n-export const CartProvider = ({ children }) => {\r\n-  const [cart, setCart] = useState({});\r\n+const Layout = ({ children }) => {\r\n+  const [user, setUser] = useState(null);\r\n+  const { totalItems } = useCart(); // ✅ Get total cart items\r\n \r\n-  const addToCart = (item) => {\r\n-    setCart((prevCart) => ({\r\n-      ...prevCart,\r\n-      [item.title]: (prevCart[item.title] || 0) + 1,\r\n-    }));\r\n-  };\r\n+  console.log(\"Cart Total Items:\", totalItems); // ✅ Debugging line\r\n+  \r\n+  useEffect(() => {\r\n+    const getUser = async () => {\r\n+      const { data: { user } } = await supabase.auth.getUser();\r\n+      setUser(user);\r\n+    };\r\n \r\n-  const removeFromCart = (item) => {\r\n-    setCart((prevCart) => {\r\n-      const newCart = { ...prevCart };\r\n-      if (newCart[item.title] > 1) {\r\n-        newCart[item.title] -= 1;\r\n-      } else {\r\n-        delete newCart[item.title];\r\n-      }\r\n-      return newCart;\r\n+    getUser();\r\n+\r\n+    // Listen for auth state changes\r\n+    const { data: authListener } = supabase.auth.onAuthStateChange((_event, session) => {\r\n+      setUser(session?.user || null);\r\n     });\r\n+\r\n+    return () => {\r\n+      authListener.subscription.unsubscribe();\r\n+    };\r\n+  }, []);\r\n+\r\n+  // ✅ Use user profile pic if available, otherwise generate a random UI avatar\r\n+  const profilePic = user?.user_metadata?.avatar_url || `https://api.dicebear.com/9.x/rings/svg?seed=${user?.id }`;\r\n+\r\n+  const navLinks = [\r\n+    { name: \"Home\", path: \"/#home\", hashLink: true },\r\n+    { name: \"About\", path: \"/#about\", hashLink: true },\r\n+    { name: \"Menu\", path: \"/menu\", hashLink: true },\r\n+    { name: \"Reservations\", path: \"/reservations\", hashLink: false },\r\n+    {name: `Order Online ${totalItems > 0 ? `(${totalItems})` : \"\"}`,  // ✅ Show cart count dynamically\r\n+    path: \"/orderOnline\", \r\n+    hashLink: true },\r\n+  ];\r\n+\r\n+  if (user) {\r\n+    navLinks.push({ name: \"Profile\", path: \"/profile\", hashLink: false, icon: profilePic });\r\n+  } else {\r\n+    navLinks.push({ name: \"Login\", path: \"/login\", hashLink: false });\r\n+  }\r\n+\r\n+  const mobileNavLink = { \r\n+    name: user ? \"\" : \" LOGIN\", \r\n+    path: user ? \"/profile\" : \"/login\", \r\n+    hashLink: false, \r\n+    icon: profilePic,  // ✅ Always provides a valid avatar\r\n   };\r\n \r\n-  const totalItems = Object.values(cart).reduce((acc, qty) => acc + qty, 0);\r\n-\r\n   return (\r\n-    <CartContext.Provider value={{ cart, addToCart, removeFromCart, totalItems }}>\r\n-      {children}\r\n-    </CartContext.Provider>\r\n+    <>\r\n+      <Header navLinks={navLinks} mobileNavLink={mobileNavLink} />\r\n+      <main id=\"home\">{children}</main>\r\n+      <Footer navLinks={navLinks} />\r\n+      <BottomNav/>\r\n+    </>\r\n   );\r\n };\r\n \r\n-export const useCart = () => useContext(CartContext);\r\n+export default Layout;\r\n"
                },
                {
                    "date": 1739403526839,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,69 +1,36 @@\n-import Header from \"./Header\";\r\n-import Footer from \"./Footer\";\r\n-import { supabase } from \"../../supabaseConfig\";\r\n-import { useState, useEffect } from \"react\";\r\n-import BottomNav from \"./BottomNav\";\r\n-import { useCart } from \"../../components/pages/onlineOrder/CartContext\";\r\n+import { createContext, useContext, useState } from \"react\";\r\n \r\n+const CartContext = createContext();\r\n \r\n-const Layout = ({ children }) => {\r\n-  const [user, setUser] = useState(null);\r\n-  const { totalItems } = useCart(); // ✅ Get total cart items\r\n+export const CartProvider = ({ children }) => {\r\n+  const [cart, setCart] = useState({});\r\n \r\n-  console.log(\"Cart Total Items:\", totalItems); // ✅ Debugging line\r\n-  \r\n-  useEffect(() => {\r\n-    const getUser = async () => {\r\n-      const { data: { user } } = await supabase.auth.getUser();\r\n-      setUser(user);\r\n-    };\r\n+  const addToCart = (item) => {\r\n+    setCart((prevCart) => ({\r\n+      ...prevCart,\r\n+      [item.id]: (prevCart[item.id] || 0) + 1, // ✅ Ensure item ID is used\r\n+    }));\r\n+  };\r\n \r\n-    getUser();\r\n-\r\n-    // Listen for auth state changes\r\n-    const { data: authListener } = supabase.auth.onAuthStateChange((_event, session) => {\r\n-      setUser(session?.user || null);\r\n+  const removeFromCart = (item) => {\r\n+    setCart((prevCart) => {\r\n+      const newCart = { ...prevCart };\r\n+      if (newCart[item.id] > 1) {\r\n+        newCart[item.id] -= 1;\r\n+      } else {\r\n+        delete newCart[item.id];\r\n+      }\r\n+      return newCart;\r\n     });\r\n+  };\r\n \r\n-    return () => {\r\n-      authListener.subscription.unsubscribe();\r\n-    };\r\n-  }, []);\r\n+  const totalItems = Object.values(cart).reduce((acc, qty) => acc + qty, 0); // ✅ Correct total count\r\n \r\n-  // ✅ Use user profile pic if available, otherwise generate a random UI avatar\r\n-  const profilePic = user?.user_metadata?.avatar_url || `https://api.dicebear.com/9.x/rings/svg?seed=${user?.id }`;\r\n-\r\n-  const navLinks = [\r\n-    { name: \"Home\", path: \"/#home\", hashLink: true },\r\n-    { name: \"About\", path: \"/#about\", hashLink: true },\r\n-    { name: \"Menu\", path: \"/menu\", hashLink: true },\r\n-    { name: \"Reservations\", path: \"/reservations\", hashLink: false },\r\n-    {name: `Order Online ${totalItems > 0 ? `(${totalItems})` : \"\"}`,  // ✅ Show cart count dynamically\r\n-    path: \"/orderOnline\", \r\n-    hashLink: true },\r\n-  ];\r\n-\r\n-  if (user) {\r\n-    navLinks.push({ name: \"Profile\", path: \"/profile\", hashLink: false, icon: profilePic });\r\n-  } else {\r\n-    navLinks.push({ name: \"Login\", path: \"/login\", hashLink: false });\r\n-  }\r\n-\r\n-  const mobileNavLink = { \r\n-    name: user ? \"\" : \" LOGIN\", \r\n-    path: user ? \"/profile\" : \"/login\", \r\n-    hashLink: false, \r\n-    icon: profilePic,  // ✅ Always provides a valid avatar\r\n-  };\r\n-\r\n   return (\r\n-    <>\r\n-      <Header navLinks={navLinks} mobileNavLink={mobileNavLink} />\r\n-      <main id=\"home\">{children}</main>\r\n-      <Footer navLinks={navLinks} />\r\n-      <BottomNav/>\r\n-    </>\r\n+    <CartContext.Provider value={{ cart, addToCart, removeFromCart, totalItems }}>\r\n+      {children}\r\n+    </CartContext.Provider>\r\n   );\r\n };\r\n \r\n-export default Layout;\r\n+export const useCart = () => useContext(CartContext);\r\n"
                },
                {
                    "date": 1739403688352,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n \r\n const CartContext = createContext();\r\n \r\n export const CartProvider = ({ children }) => {\r\n-  const [cart, setCart] = useState({});\r\n+  const [cart, setCart] = useState({}); // ✅ Ensure cart is always an object\r\n \r\n   const addToCart = (item) => {\r\n     setCart((prevCart) => ({\r\n       ...prevCart,\r\n@@ -23,9 +23,9 @@\n       return newCart;\r\n     });\r\n   };\r\n \r\n-  const totalItems = Object.values(cart).reduce((acc, qty) => acc + qty, 0); // ✅ Correct total count\r\n+  const totalItems = Object.values(cart || {}).reduce((acc, qty) => acc + qty, 0); // ✅ Prevent undefined error\r\n \r\n   return (\r\n     <CartContext.Provider value={{ cart, addToCart, removeFromCart, totalItems }}>\r\n       {children}\r\n"
                },
                {
                    "date": 1739404032162,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,36 +1,20 @@\n import { createContext, useContext, useState } from \"react\";\r\n \r\n+// Create the CartContext\r\n const CartContext = createContext();\r\n \r\n+// CartProvider component to wrap the app\r\n export const CartProvider = ({ children }) => {\r\n-  const [cart, setCart] = useState({}); // ✅ Ensure cart is always an object\r\n+  const [cartItems, setCartItems] = useState([]); // ✅ Default to an empty array\r\n \r\n-  const addToCart = (item) => {\r\n-    setCart((prevCart) => ({\r\n-      ...prevCart,\r\n-      [item.id]: (prevCart[item.id] || 0) + 1, // ✅ Ensure item ID is used\r\n-    }));\r\n-  };\r\n-\r\n-  const removeFromCart = (item) => {\r\n-    setCart((prevCart) => {\r\n-      const newCart = { ...prevCart };\r\n-      if (newCart[item.id] > 1) {\r\n-        newCart[item.id] -= 1;\r\n-      } else {\r\n-        delete newCart[item.id];\r\n-      }\r\n-      return newCart;\r\n-    });\r\n-  };\r\n-\r\n-  const totalItems = Object.values(cart || {}).reduce((acc, qty) => acc + qty, 0); // ✅ Prevent undefined error\r\n-\r\n   return (\r\n-    <CartContext.Provider value={{ cart, addToCart, removeFromCart, totalItems }}>\r\n+    <CartContext.Provider value={{ cartItems, setCartItems }}>\r\n       {children}\r\n     </CartContext.Provider>\r\n   );\r\n };\r\n \r\n-export const useCart = () => useContext(CartContext);\r\n+// Custom hook to use the cart context\r\n+export const useCart = () => {\r\n+  return useContext(CartContext);\r\n+};\r\n"
                }
            ],
            "date": 1739400618226,
            "name": "Commit-0",
            "content": ""
        }
    ]
}