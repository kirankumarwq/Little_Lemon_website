{
    "sourceFile": "src/components/pages/onlineOrder/Checkout.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 6,
            "patches": [
                {
                    "date": 1739407647437,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1739408501737,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,9 +65,9 @@\n           <p>Tax (10%): ${tax.toFixed(2)}</p>\r\n           <h3>Total: ${total.toFixed(2)}</h3>\r\n \r\n           {/* Proceed to Payment Button */}\r\n-          <button className=\"payment-btn\" onClick={() => navigate(\"/payment\")}>\r\n+          <button className=\"payment-btn\" onClick={() => navigate(\"/OrderConfirmation\")}>\r\n             Proceed to Payment\r\n           </button>\r\n         </div>\r\n       )}\r\n"
                },
                {
                    "date": 1739408729493,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,77 +1,62 @@\n-import React from \"react\";\r\n-import { useCart } from \"../onlineOrder/CartContext\"; // âœ… Import Cart Context\r\n+import { useState } from \"react\";\r\n import { useNavigate } from \"react-router-dom\";\r\n-import \"./checkout.css\"; // âœ… Import external CSS\r\n \r\n const Checkout = () => {\r\n-  const { cartItems, setCartItems } = useCart();\r\n   const navigate = useNavigate();\r\n+  const [paymentMethod, setPaymentMethod] = useState(\"COD\"); // Default to COD\r\n \r\n-  // âœ… Update item quantity\r\n-  const updateQuantity = (item, amount) => {\r\n-    const updatedCart = cartItems.map((cartItem) =>\r\n-      cartItem.title === item.title\r\n-        ? { ...cartItem, quantity: Math.max(1, cartItem.quantity + amount) }\r\n-        : cartItem\r\n-    );\r\n-    setCartItems(updatedCart);\r\n+  const handlePayment = () => {\r\n+    if (paymentMethod === \"Online\") {\r\n+      // Simulate online payment (replace this with real integration later)\r\n+      setTimeout(() => {\r\n+        alert(\"Payment Successful! Redirecting...\");\r\n+        navigate(\"/confirmation\");\r\n+      }, 2000);\r\n+    } else {\r\n+      // Directly go to confirmation for COD\r\n+      navigate(\"/confirmation\");\r\n+    }\r\n   };\r\n \r\n-  // âœ… Remove item from cart\r\n-  const removeItem = (item) => {\r\n-    const updatedCart = cartItems.filter((cartItem) => cartItem.title !== item.title);\r\n-    setCartItems(updatedCart);\r\n-  };\r\n-\r\n-  // âœ… Calculate subtotal\r\n-  const subtotal = cartItems.reduce((sum, item) => sum + item.price * item.quantity, 0);\r\n-  const tax = subtotal * 0.1; // Assuming 10% tax\r\n-  const total = subtotal + tax;\r\n-\r\n   return (\r\n     <div className=\"checkout-container\">\r\n       <h2>Checkout</h2>\r\n \r\n-      {/* ðŸ›’ Show Cart Items */}\r\n-      {cartItems.length > 0 ? (\r\n-        <div className=\"checkout-items\">\r\n-          {cartItems.map((item, index) => (\r\n-            <div key={index} className=\"checkout-item\">\r\n-              <div className=\"item-details\">\r\n-                <h4>{item.title}</h4>\r\n-                <p>${item.price.toFixed(2)} x {item.quantity}</p>\r\n-              </div>\r\n+      <div className=\"payment-options\">\r\n+        <h3>Select Payment Method:</h3>\r\n+        <label>\r\n+          <input\r\n+            type=\"radio\"\r\n+            name=\"payment\"\r\n+            value=\"COD\"\r\n+            checked={paymentMethod === \"COD\"}\r\n+            onChange={() => setPaymentMethod(\"COD\")}\r\n+          />\r\n+          Cash on Delivery (COD)\r\n+        </label>\r\n+        <label>\r\n+          <input\r\n+            type=\"radio\"\r\n+            name=\"payment\"\r\n+            value=\"Online\"\r\n+            checked={paymentMethod === \"Online\"}\r\n+            onChange={() => setPaymentMethod(\"Online\")}\r\n+          />\r\n+          Online Payment\r\n+        </label>\r\n+      </div>\r\n \r\n-              {/* Quantity Controls */}\r\n-              <div className=\"item-controls\">\r\n-                <button onClick={() => updateQuantity(item, -1)}>-</button>\r\n-                <span>{item.quantity}</span>\r\n-                <button onClick={() => updateQuantity(item, 1)}>+</button>\r\n-              </div>\r\n-\r\n-              {/* Remove Button */}\r\n-              <button className=\"remove-btn\" onClick={() => removeItem(item)}>Remove</button>\r\n-            </div>\r\n-          ))}\r\n+      {paymentMethod === \"Online\" && (\r\n+        <div className=\"online-payment\">\r\n+          <p>ðŸ”’ Secure Online Payment (Dummy for now)</p>\r\n+          <button onClick={handlePayment} className=\"pay-btn\">Pay Now</button>\r\n         </div>\r\n-      ) : (\r\n-        <p>Your cart is empty.</p>\r\n       )}\r\n \r\n-      {/* ðŸ›’ Order Summary */}\r\n-      {cartItems.length > 0 && (\r\n-        <div className=\"order-summary\">\r\n-          <p>Subtotal: ${subtotal.toFixed(2)}</p>\r\n-          <p>Tax (10%): ${tax.toFixed(2)}</p>\r\n-          <h3>Total: ${total.toFixed(2)}</h3>\r\n-\r\n-          {/* Proceed to Payment Button */}\r\n-          <button className=\"payment-btn\" onClick={() => navigate(\"/OrderConfirmation\")}>\r\n-            Proceed to Payment\r\n-          </button>\r\n-        </div>\r\n-      )}\r\n+      <button onClick={handlePayment} className=\"place-order-btn\">\r\n+        {paymentMethod === \"Online\" ? \"Proceed to Payment\" : \"Place Order\"}\r\n+      </button>\r\n     </div>\r\n   );\r\n };\r\n \r\n"
                },
                {
                    "date": 1739409060893,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,62 +1,129 @@\n-import { useState } from \"react\";\r\n+import React, { useState } from \"react\";\r\n+import { useCart } from \"../onlineOrder/CartContext\"; // âœ… Import Cart Context\r\n import { useNavigate } from \"react-router-dom\";\r\n+import \"./checkout.css\"; // âœ… Import external CSS\r\n \r\n const Checkout = () => {\r\n+  const { cartItems, setCartItems } = useCart();\r\n   const navigate = useNavigate();\r\n   const [paymentMethod, setPaymentMethod] = useState(\"COD\"); // Default to COD\r\n \r\n+  // âœ… Update item quantity\r\n+  const updateQuantity = (item, amount) => {\r\n+    const updatedCart = cartItems.map((cartItem) =>\r\n+      cartItem.title === item.title\r\n+        ? { ...cartItem, quantity: Math.max(1, cartItem.quantity + amount) }\r\n+        : cartItem\r\n+    );\r\n+    setCartItems(updatedCart);\r\n+  };\r\n+\r\n+  // âœ… Remove item from cart\r\n+  const removeItem = (item) => {\r\n+    const updatedCart = cartItems.filter((cartItem) => cartItem.title !== item.title);\r\n+    setCartItems(updatedCart);\r\n+  };\r\n+\r\n+  // âœ… Calculate subtotal\r\n+  const subtotal = cartItems.reduce((sum, item) => sum + item.price * item.quantity, 0);\r\n+  const tax = subtotal * 0.1; // Assuming 10% tax\r\n+  const total = subtotal + tax;\r\n+\r\n+  // âœ… Handle Payment Process\r\n   const handlePayment = () => {\r\n+    if (cartItems.length === 0) {\r\n+      alert(\"Your cart is empty!\");\r\n+      return;\r\n+    }\r\n+\r\n     if (paymentMethod === \"Online\") {\r\n-      // Simulate online payment (replace this with real integration later)\r\n+      // Simulate Online Payment\r\n       setTimeout(() => {\r\n         alert(\"Payment Successful! Redirecting...\");\r\n-        navigate(\"/confirmation\");\r\n+        finalizeOrder();\r\n       }, 2000);\r\n     } else {\r\n-      // Directly go to confirmation for COD\r\n-      navigate(\"/confirmation\");\r\n+      // COD - Directly finalize order\r\n+      finalizeOrder();\r\n     }\r\n   };\r\n \r\n+  // âœ… Finalize Order (Clear Cart & Redirect)\r\n+  const finalizeOrder = () => {\r\n+    setCartItems([]); // Clear cart after order\r\n+    navigate(\"/OrderConfirmation\"); // Redirect to confirmation page\r\n+    window.location.reload(); // Refresh Order Online page\r\n+  };\r\n+\r\n   return (\r\n     <div className=\"checkout-container\">\r\n       <h2>Checkout</h2>\r\n \r\n-      <div className=\"payment-options\">\r\n-        <h3>Select Payment Method:</h3>\r\n-        <label>\r\n-          <input\r\n-            type=\"radio\"\r\n-            name=\"payment\"\r\n-            value=\"COD\"\r\n-            checked={paymentMethod === \"COD\"}\r\n-            onChange={() => setPaymentMethod(\"COD\")}\r\n-          />\r\n-          Cash on Delivery (COD)\r\n-        </label>\r\n-        <label>\r\n-          <input\r\n-            type=\"radio\"\r\n-            name=\"payment\"\r\n-            value=\"Online\"\r\n-            checked={paymentMethod === \"Online\"}\r\n-            onChange={() => setPaymentMethod(\"Online\")}\r\n-          />\r\n-          Online Payment\r\n-        </label>\r\n-      </div>\r\n+      {/* ðŸ›’ Show Cart Items */}\r\n+      {cartItems.length > 0 ? (\r\n+        <div className=\"checkout-items\">\r\n+          {cartItems.map((item, index) => (\r\n+            <div key={index} className=\"checkout-item\">\r\n+              <div className=\"item-details\">\r\n+                <h4>{item.title}</h4>\r\n+                <p>${item.price.toFixed(2)} x {item.quantity}</p>\r\n+              </div>\r\n \r\n-      {paymentMethod === \"Online\" && (\r\n-        <div className=\"online-payment\">\r\n-          <p>ðŸ”’ Secure Online Payment (Dummy for now)</p>\r\n-          <button onClick={handlePayment} className=\"pay-btn\">Pay Now</button>\r\n+              {/* Quantity Controls */}\r\n+              <div className=\"item-controls\">\r\n+                <button onClick={() => updateQuantity(item, -1)}>-</button>\r\n+                <span>{item.quantity}</span>\r\n+                <button onClick={() => updateQuantity(item, 1)}>+</button>\r\n+              </div>\r\n+\r\n+              {/* Remove Button */}\r\n+              <button className=\"remove-btn\" onClick={() => removeItem(item)}>Remove</button>\r\n+            </div>\r\n+          ))}\r\n         </div>\r\n+      ) : (\r\n+        <p>Your cart is empty.</p>\r\n       )}\r\n \r\n-      <button onClick={handlePayment} className=\"place-order-btn\">\r\n-        {paymentMethod === \"Online\" ? \"Proceed to Payment\" : \"Place Order\"}\r\n-      </button>\r\n+      {/* ðŸ›’ Order Summary */}\r\n+      {cartItems.length > 0 && (\r\n+        <div className=\"order-summary\">\r\n+          <p>Subtotal: ${subtotal.toFixed(2)}</p>\r\n+          <p>Tax (10%): ${tax.toFixed(2)}</p>\r\n+          <h3>Total: ${total.toFixed(2)}</h3>\r\n+\r\n+          {/* Payment Selection */}\r\n+          <div className=\"payment-options\">\r\n+            <h3>Select Payment Method:</h3>\r\n+            <label>\r\n+              <input\r\n+                type=\"radio\"\r\n+                name=\"payment\"\r\n+                value=\"COD\"\r\n+                checked={paymentMethod === \"COD\"}\r\n+                onChange={() => setPaymentMethod(\"COD\")}\r\n+              />\r\n+              Cash on Delivery (COD)\r\n+            </label>\r\n+            <label>\r\n+              <input\r\n+                type=\"radio\"\r\n+                name=\"payment\"\r\n+                value=\"Online\"\r\n+                checked={paymentMethod === \"Online\"}\r\n+                onChange={() => setPaymentMethod(\"Online\")}\r\n+              />\r\n+              Online Payment\r\n+            </label>\r\n+          </div>\r\n+\r\n+          {/* Payment Button */}\r\n+          <button className=\"payment-btn\" onClick={handlePayment}>\r\n+            {paymentMethod === \"Online\" ? \"Proceed to Payment\" : \"Place Order\"}\r\n+          </button>\r\n+        </div>\r\n+      )}\r\n     </div>\r\n   );\r\n };\r\n \r\n"
                },
                {
                    "date": 1739409873797,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,8 +44,11 @@\n       }, 2000);\r\n     } else {\r\n       // COD - Directly finalize order\r\n       finalizeOrder();\r\n+      navigate(\"/order-confirmation\", {\r\n+        state: { cartItems, total }, // âœ… Pass cart items & total\r\n+      });\r\n     }\r\n   };\r\n \r\n   // âœ… Finalize Order (Clear Cart & Redirect)\r\n"
                },
                {
                    "date": 1739410105783,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,8 +30,11 @@\n   const total = subtotal + tax;\r\n \r\n   // âœ… Handle Payment Process\r\n   const handlePayment = () => {\r\n+    navigate(\"/order-confirmation\", {\r\n+        state: { cartItems, total }, // âœ… Pass cart items & total\r\n+    });\r\n     if (cartItems.length === 0) {\r\n       alert(\"Your cart is empty!\");\r\n       return;\r\n     }\r\n@@ -44,10 +47,9 @@\n       }, 2000);\r\n     } else {\r\n       // COD - Directly finalize order\r\n       finalizeOrder();\r\n-      navigate(\"/order-confirmation\", {\r\n-        state: { cartItems, total }, // âœ… Pass cart items & total\r\n+     \r\n       });\r\n     }\r\n   };\r\n \r\n"
                },
                {
                    "date": 1739410117411,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,10 +47,9 @@\n       }, 2000);\r\n     } else {\r\n       // COD - Directly finalize order\r\n       finalizeOrder();\r\n-     \r\n-      });\r\n+    \r\n     }\r\n   };\r\n \r\n   // âœ… Finalize Order (Clear Cart & Redirect)\r\n"
                }
            ],
            "date": 1739407647437,
            "name": "Commit-0",
            "content": "import React from \"react\";\r\nimport { useCart } from \"../onlineOrder/CartContext\"; // âœ… Import Cart Context\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport \"./checkout.css\"; // âœ… Import external CSS\r\n\r\nconst Checkout = () => {\r\n  const { cartItems, setCartItems } = useCart();\r\n  const navigate = useNavigate();\r\n\r\n  // âœ… Update item quantity\r\n  const updateQuantity = (item, amount) => {\r\n    const updatedCart = cartItems.map((cartItem) =>\r\n      cartItem.title === item.title\r\n        ? { ...cartItem, quantity: Math.max(1, cartItem.quantity + amount) }\r\n        : cartItem\r\n    );\r\n    setCartItems(updatedCart);\r\n  };\r\n\r\n  // âœ… Remove item from cart\r\n  const removeItem = (item) => {\r\n    const updatedCart = cartItems.filter((cartItem) => cartItem.title !== item.title);\r\n    setCartItems(updatedCart);\r\n  };\r\n\r\n  // âœ… Calculate subtotal\r\n  const subtotal = cartItems.reduce((sum, item) => sum + item.price * item.quantity, 0);\r\n  const tax = subtotal * 0.1; // Assuming 10% tax\r\n  const total = subtotal + tax;\r\n\r\n  return (\r\n    <div className=\"checkout-container\">\r\n      <h2>Checkout</h2>\r\n\r\n      {/* ðŸ›’ Show Cart Items */}\r\n      {cartItems.length > 0 ? (\r\n        <div className=\"checkout-items\">\r\n          {cartItems.map((item, index) => (\r\n            <div key={index} className=\"checkout-item\">\r\n              <div className=\"item-details\">\r\n                <h4>{item.title}</h4>\r\n                <p>${item.price.toFixed(2)} x {item.quantity}</p>\r\n              </div>\r\n\r\n              {/* Quantity Controls */}\r\n              <div className=\"item-controls\">\r\n                <button onClick={() => updateQuantity(item, -1)}>-</button>\r\n                <span>{item.quantity}</span>\r\n                <button onClick={() => updateQuantity(item, 1)}>+</button>\r\n              </div>\r\n\r\n              {/* Remove Button */}\r\n              <button className=\"remove-btn\" onClick={() => removeItem(item)}>Remove</button>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      ) : (\r\n        <p>Your cart is empty.</p>\r\n      )}\r\n\r\n      {/* ðŸ›’ Order Summary */}\r\n      {cartItems.length > 0 && (\r\n        <div className=\"order-summary\">\r\n          <p>Subtotal: ${subtotal.toFixed(2)}</p>\r\n          <p>Tax (10%): ${tax.toFixed(2)}</p>\r\n          <h3>Total: ${total.toFixed(2)}</h3>\r\n\r\n          {/* Proceed to Payment Button */}\r\n          <button className=\"payment-btn\" onClick={() => navigate(\"/payment\")}>\r\n            Proceed to Payment\r\n          </button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Checkout;\r\n"
        }
    ]
}